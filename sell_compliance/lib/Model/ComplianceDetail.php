<?php
/**
 * ComplianceDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  Nopolabs\EBay\Sell\Compliance
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Sherpa Compliance Service
 *
 * Service for providing the compliance violations of seller account/listings
 *
 * OpenAPI spec version: 1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Nopolabs\EBay\Sell\Compliance\Model;

use \ArrayAccess;
use \Nopolabs\EBay\Sell\Compliance\ObjectSerializer;

/**
 * ComplianceDetail Class Doc Comment
 *
 * @category Class
 * @description This type is used by each listing violation that is returned under the &lt;b&gt;violations&lt;/b&gt; container.
 * @package  Nopolabs\EBay\Sell\Compliance
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ComplianceDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ComplianceDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'reason_code' => 'string',
        'message' => 'string',
        'variation' => '\Nopolabs\EBay\Sell\Compliance\Model\VariationDetails',
        'violation_data' => '\Nopolabs\EBay\Sell\Compliance\Model\NameValueList[]',
        'corrective_recommendations' => '\Nopolabs\EBay\Sell\Compliance\Model\CorrectiveRecommendations'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'reason_code' => null,
        'message' => null,
        'variation' => null,
        'violation_data' => null,
        'corrective_recommendations' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'reason_code' => 'reasonCode',
        'message' => 'message',
        'variation' => 'variation',
        'violation_data' => 'violationData',
        'corrective_recommendations' => 'correctiveRecommendations'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'reason_code' => 'setReasonCode',
        'message' => 'setMessage',
        'variation' => 'setVariation',
        'violation_data' => 'setViolationData',
        'corrective_recommendations' => 'setCorrectiveRecommendations'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'reason_code' => 'getReasonCode',
        'message' => 'getMessage',
        'variation' => 'getVariation',
        'violation_data' => 'getViolationData',
        'corrective_recommendations' => 'getCorrectiveRecommendations'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['reason_code'] = isset($data['reason_code']) ? $data['reason_code'] : null;
        $this->container['message'] = isset($data['message']) ? $data['message'] : null;
        $this->container['variation'] = isset($data['variation']) ? $data['variation'] : null;
        $this->container['violation_data'] = isset($data['violation_data']) ? $data['violation_data'] : null;
        $this->container['corrective_recommendations'] = isset($data['corrective_recommendations']) ? $data['corrective_recommendations'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets reason_code
     *
     * @return string
     */
    public function getReasonCode()
    {
        return $this->container['reason_code'];
    }

    /**
     * Sets reason_code
     *
     * @param string $reason_code This value states the nature of the listing violation. A reasonCode value is returned for each listing violation, and each compliance type has several reason codes. For more information on PRODUCT_ADOPTION reason codes and how to revise your listings based on these reason codes, see the Using Compliance API reason codes to revise listings topic in the Product-Based Shopping Experience Playbook. The OUTSIDE_EBAY_BUYING_AND_SELLING reason codes include the following. For each of these violations, the seller will just need to remove this information with a revise listing call: UNAPPROVED_DOMAIN_WEBLINK_IN_LISTING PHONE_NUMBER_IN_LISTING EMAIL_ADDRESS_IN_LISTING The HTTPS reason codes include the following. For each of these violations, the seller will just need to remove the HTTP link from the listing details or product details: NON_SECURE_HTTP_LINK_IN_LISTING NON_SECURE_HTTP_LINK_IN_PRODUCT
     *
     * @return $this
     */
    public function setReasonCode($reason_code)
    {
        $this->container['reason_code'] = $reason_code;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string $message This field provides a textual summary of the listing violation. A message field is returned for each listing violation.
     *
     * @return $this
     */
    public function setMessage($message)
    {
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets variation
     *
     * @return \Nopolabs\EBay\Sell\Compliance\Model\VariationDetails
     */
    public function getVariation()
    {
        return $this->container['variation'];
    }

    /**
     * Sets variation
     *
     * @param \Nopolabs\EBay\Sell\Compliance\Model\VariationDetails $variation variation
     *
     * @return $this
     */
    public function setVariation($variation)
    {
        $this->container['variation'] = $variation;

        return $this;
    }

    /**
     * Gets violation_data
     *
     * @return \Nopolabs\EBay\Sell\Compliance\Model\NameValueList[]
     */
    public function getViolationData()
    {
        return $this->container['violation_data'];
    }

    /**
     * Sets violation_data
     *
     * @param \Nopolabs\EBay\Sell\Compliance\Model\NameValueList[] $violation_data Note: This container is for future use. Once it becomes available, this container will provide more information about the listing violation if applicable. The type of information that appears here will vary based on the compliance type and type of violation.
     *
     * @return $this
     */
    public function setViolationData($violation_data)
    {
        $this->container['violation_data'] = $violation_data;

        return $this;
    }

    /**
     * Gets corrective_recommendations
     *
     * @return \Nopolabs\EBay\Sell\Compliance\Model\CorrectiveRecommendations
     */
    public function getCorrectiveRecommendations()
    {
        return $this->container['corrective_recommendations'];
    }

    /**
     * Sets corrective_recommendations
     *
     * @param \Nopolabs\EBay\Sell\Compliance\Model\CorrectiveRecommendations $corrective_recommendations corrective_recommendations
     *
     * @return $this
     */
    public function setCorrectiveRecommendations($corrective_recommendations)
    {
        $this->container['corrective_recommendations'] = $corrective_recommendations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


