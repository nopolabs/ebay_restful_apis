<?php
/**
 * Metric
 *
 * PHP version 5
 *
 * @category Class
 * @package  Nopolabs\EBay\Sell\Analytics
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Analytics API
 *
 * The Analytics API provides information about a seller's business performance. The getTrafficReport method shows how buyers are engaging with listings and the getSellerStandardsProfile methods show if the seller is meeting buyer expectations.
 *
 * OpenAPI spec version: v1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Nopolabs\EBay\Sell\Analytics\Model;

use \ArrayAccess;
use \Nopolabs\EBay\Sell\Analytics\ObjectSerializer;

/**
 * Metric Class Doc Comment
 *
 * @category Class
 * @description A complex type that defines the metrics on which sellers are evaluated.
 * @package  Nopolabs\EBay\Sell\Analytics
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Metric implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Metric';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'level' => 'string',
        'lookback_end_date' => 'string',
        'lookback_start_date' => 'string',
        'metric_key' => 'string',
        'name' => 'string',
        'threshold_lower_bound' => 'object',
        'threshold_meta_data' => 'string',
        'threshold_upper_bound' => 'object',
        'type' => 'string',
        'value' => 'object'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'level' => null,
        'lookback_end_date' => null,
        'lookback_start_date' => null,
        'metric_key' => null,
        'name' => null,
        'threshold_lower_bound' => null,
        'threshold_meta_data' => null,
        'threshold_upper_bound' => null,
        'type' => null,
        'value' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'level' => 'level',
        'lookback_end_date' => 'lookbackEndDate',
        'lookback_start_date' => 'lookbackStartDate',
        'metric_key' => 'metricKey',
        'name' => 'name',
        'threshold_lower_bound' => 'thresholdLowerBound',
        'threshold_meta_data' => 'thresholdMetaData',
        'threshold_upper_bound' => 'thresholdUpperBound',
        'type' => 'type',
        'value' => 'value'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'level' => 'setLevel',
        'lookback_end_date' => 'setLookbackEndDate',
        'lookback_start_date' => 'setLookbackStartDate',
        'metric_key' => 'setMetricKey',
        'name' => 'setName',
        'threshold_lower_bound' => 'setThresholdLowerBound',
        'threshold_meta_data' => 'setThresholdMetaData',
        'threshold_upper_bound' => 'setThresholdUpperBound',
        'type' => 'setType',
        'value' => 'setValue'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'level' => 'getLevel',
        'lookback_end_date' => 'getLookbackEndDate',
        'lookback_start_date' => 'getLookbackStartDate',
        'metric_key' => 'getMetricKey',
        'name' => 'getName',
        'threshold_lower_bound' => 'getThresholdLowerBound',
        'threshold_meta_data' => 'getThresholdMetaData',
        'threshold_upper_bound' => 'getThresholdUpperBound',
        'type' => 'getType',
        'value' => 'getValue'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['level'] = isset($data['level']) ? $data['level'] : null;
        $this->container['lookback_end_date'] = isset($data['lookback_end_date']) ? $data['lookback_end_date'] : null;
        $this->container['lookback_start_date'] = isset($data['lookback_start_date']) ? $data['lookback_start_date'] : null;
        $this->container['metric_key'] = isset($data['metric_key']) ? $data['metric_key'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['threshold_lower_bound'] = isset($data['threshold_lower_bound']) ? $data['threshold_lower_bound'] : null;
        $this->container['threshold_meta_data'] = isset($data['threshold_meta_data']) ? $data['threshold_meta_data'] : null;
        $this->container['threshold_upper_bound'] = isset($data['threshold_upper_bound']) ? $data['threshold_upper_bound'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['value'] = isset($data['value']) ? $data['value'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets level
     *
     * @return string
     */
    public function getLevel()
    {
        return $this->container['level'];
    }

    /**
     * Sets level
     *
     * @param string $level Indicates the seller level for this metric. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/analytics/types/StandardsLevelEnum.html'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setLevel($level)
    {
        $this->container['level'] = $level;

        return $this;
    }

    /**
     * Gets lookback_end_date
     *
     * @return string
     */
    public function getLookbackEndDate()
    {
        return $this->container['lookback_end_date'];
    }

    /**
     * Sets lookback_end_date
     *
     * @param string $lookback_end_date The end date of the period during which the seller was evaluated for the associated metric.
     *
     * @return $this
     */
    public function setLookbackEndDate($lookback_end_date)
    {
        $this->container['lookback_end_date'] = $lookback_end_date;

        return $this;
    }

    /**
     * Gets lookback_start_date
     *
     * @return string
     */
    public function getLookbackStartDate()
    {
        return $this->container['lookback_start_date'];
    }

    /**
     * Sets lookback_start_date
     *
     * @param string $lookback_start_date The beginning date of the period during which the seller was evaluated for the associated metric.
     *
     * @return $this
     */
    public function setLookbackStartDate($lookback_start_date)
    {
        $this->container['lookback_start_date'] = $lookback_start_date;

        return $this;
    }

    /**
     * Gets metric_key
     *
     * @return string
     */
    public function getMetricKey()
    {
        return $this->container['metric_key'];
    }

    /**
     * Sets metric_key
     *
     * @param string $metric_key The name of the metric. For example, Defect rate.
     *
     * @return $this
     */
    public function setMetricKey($metric_key)
    {
        $this->container['metric_key'] = $metric_key;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The complete name of the metric for which the seller is being evaluated. This value is localized according to the value of the X-EBAY-C-MARKETPLACE-ID request header.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets threshold_lower_bound
     *
     * @return object
     */
    public function getThresholdLowerBound()
    {
        return $this->container['threshold_lower_bound'];
    }

    /**
     * Sets threshold_lower_bound
     *
     * @param object $threshold_lower_bound The lower limit of the metric threshold used in the evaluation. Each program can have different threshold levels.
     *
     * @return $this
     */
    public function setThresholdLowerBound($threshold_lower_bound)
    {
        $this->container['threshold_lower_bound'] = $threshold_lower_bound;

        return $this;
    }

    /**
     * Gets threshold_meta_data
     *
     * @return string
     */
    public function getThresholdMetaData()
    {
        return $this->container['threshold_meta_data'];
    }

    /**
     * Sets threshold_meta_data
     *
     * @param string $threshold_meta_data Expression for the type of metric, and the inclusive and exclusive characteristics of the upper and lower bounds of the threshold. Thresholds are shown for either a count or a rate. For example, the following metadata means that to maintain the level for this metric, you must continue to have a value of 90 or better, and there is no upper bound for this metric: [90, NA) Metadata values are enclosed by parentheses and/or square brackets. A parenthesis means the adjacent value is exclusive, while a square bracket means the adjacent value is inclusive.
     *
     * @return $this
     */
    public function setThresholdMetaData($threshold_meta_data)
    {
        $this->container['threshold_meta_data'] = $threshold_meta_data;

        return $this;
    }

    /**
     * Gets threshold_upper_bound
     *
     * @return object
     */
    public function getThresholdUpperBound()
    {
        return $this->container['threshold_upper_bound'];
    }

    /**
     * Sets threshold_upper_bound
     *
     * @param object $threshold_upper_bound The upper limit of the metric threshold used in the evaluation. Each program can have different threshold levels.
     *
     * @return $this
     */
    public function setThresholdUpperBound($threshold_upper_bound)
    {
        $this->container['threshold_upper_bound'] = $threshold_upper_bound;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type Indicates the data type of the returned metric, such as a string or integer value. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/analytics/types/DataTypeEnum.html'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets value
     *
     * @return object
     */
    public function getValue()
    {
        return $this->container['value'];
    }

    /**
     * Sets value
     *
     * @param object $value The seller's value, or score, for the metric.
     *
     * @return $this
     */
    public function setValue($value)
    {
        $this->container['value'] = $value;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


