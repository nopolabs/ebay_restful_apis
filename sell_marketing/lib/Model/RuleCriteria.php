<?php
/**
 * RuleCriteria
 *
 * PHP version 5
 *
 * @category Class
 * @package  Nopolabs\EBay\Sell\Marketing
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * The Marketing API offers two platforms that let sellers promote and advertise their products: Promoted Listings is an eBay ad service that lets sellers set up ad campaigns for the products they want to promote. eBay displays the ads in search results and in other marketing modules as SPONSORED listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage of the sales price. For complete details, see Promoted Listings. Promotions Manager gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as &quot;20% off&quot; and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion teasers throughout buyer flows. For complete details, see Promotions Manager. Marketing reports, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts. Important! Sellers must have an active eBay Store subscription, and they must accept the Terms and Conditions before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the &quot;requirements and restrictions&quot; sections for Promoted Listings and Promotions Manager. The table below lists all the Marketing API calls grouped by resource.
 *
 * OpenAPI spec version: v1.4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Nopolabs\EBay\Sell\Marketing\Model;

use \ArrayAccess;
use \Nopolabs\EBay\Sell\Marketing\ObjectSerializer;

/**
 * RuleCriteria Class Doc Comment
 *
 * @category Class
 * @description This type defines the fields for a set of inventory selection rules.  &lt;br&gt;&lt;br&gt;&lt;b&gt;Required:&lt;/b&gt; When &lt;b&gt;inventoryCriterionType&lt;/b&gt; is set to &lt;code&gt;INVENTORY_BY_RULE&lt;/code&gt;.
 * @package  Nopolabs\EBay\Sell\Marketing
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class RuleCriteria implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'RuleCriteria';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'exclude_inventory_items' => '\Nopolabs\EBay\Sell\Marketing\Model\InventoryItem[]',
        'exclude_listing_ids' => 'string[]',
        'markup_inventory_items' => '\Nopolabs\EBay\Sell\Marketing\Model\InventoryItem[]',
        'markup_listing_ids' => 'string[]',
        'selection_rules' => '\Nopolabs\EBay\Sell\Marketing\Model\SelectionRule[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'exclude_inventory_items' => null,
        'exclude_listing_ids' => null,
        'markup_inventory_items' => null,
        'markup_listing_ids' => null,
        'selection_rules' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'exclude_inventory_items' => 'excludeInventoryItems',
        'exclude_listing_ids' => 'excludeListingIds',
        'markup_inventory_items' => 'markupInventoryItems',
        'markup_listing_ids' => 'markupListingIds',
        'selection_rules' => 'selectionRules'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'exclude_inventory_items' => 'setExcludeInventoryItems',
        'exclude_listing_ids' => 'setExcludeListingIds',
        'markup_inventory_items' => 'setMarkupInventoryItems',
        'markup_listing_ids' => 'setMarkupListingIds',
        'selection_rules' => 'setSelectionRules'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'exclude_inventory_items' => 'getExcludeInventoryItems',
        'exclude_listing_ids' => 'getExcludeListingIds',
        'markup_inventory_items' => 'getMarkupInventoryItems',
        'markup_listing_ids' => 'getMarkupListingIds',
        'selection_rules' => 'getSelectionRules'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['exclude_inventory_items'] = isset($data['exclude_inventory_items']) ? $data['exclude_inventory_items'] : null;
        $this->container['exclude_listing_ids'] = isset($data['exclude_listing_ids']) ? $data['exclude_listing_ids'] : null;
        $this->container['markup_inventory_items'] = isset($data['markup_inventory_items']) ? $data['markup_inventory_items'] : null;
        $this->container['markup_listing_ids'] = isset($data['markup_listing_ids']) ? $data['markup_listing_ids'] : null;
        $this->container['selection_rules'] = isset($data['selection_rules']) ? $data['selection_rules'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets exclude_inventory_items
     *
     * @return \Nopolabs\EBay\Sell\Marketing\Model\InventoryItem[]
     */
    public function getExcludeInventoryItems()
    {
        return $this->container['exclude_inventory_items'];
    }

    /**
     * Sets exclude_inventory_items
     *
     * @param \Nopolabs\EBay\Sell\Marketing\Model\InventoryItem[] $exclude_inventory_items A list of seller inventory reference IDs to exclude from the promotion. Note: The request can have either excludeInventoryItems or excludeListingIds but not both. Maximum: 100 parent items Maximum SKU or custom label length: 50 characters
     *
     * @return $this
     */
    public function setExcludeInventoryItems($exclude_inventory_items)
    {
        $this->container['exclude_inventory_items'] = $exclude_inventory_items;

        return $this;
    }

    /**
     * Gets exclude_listing_ids
     *
     * @return string[]
     */
    public function getExcludeListingIds()
    {
        return $this->container['exclude_listing_ids'];
    }

    /**
     * Sets exclude_listing_ids
     *
     * @param string[] $exclude_listing_ids A list of eBay listing IDs to exclude from the promotion. Note: The request can have either excludeInventoryItems or excludeListingIds but not both. Maximum: 100 parent items Maximum SKU or custom label length: 50 characters
     *
     * @return $this
     */
    public function setExcludeListingIds($exclude_listing_ids)
    {
        $this->container['exclude_listing_ids'] = $exclude_listing_ids;

        return $this;
    }

    /**
     * Gets markup_inventory_items
     *
     * @return \Nopolabs\EBay\Sell\Marketing\Model\InventoryItem[]
     */
    public function getMarkupInventoryItems()
    {
        return $this->container['markup_inventory_items'];
    }

    /**
     * Sets markup_inventory_items
     *
     * @param \Nopolabs\EBay\Sell\Marketing\Model\InventoryItem[] $markup_inventory_items A list of SKUs to remove from a markdown promotion. The listed SKUs are 'marked up' to their standard price after being part of the markdown promotion.
     *
     * @return $this
     */
    public function setMarkupInventoryItems($markup_inventory_items)
    {
        $this->container['markup_inventory_items'] = $markup_inventory_items;

        return $this;
    }

    /**
     * Gets markup_listing_ids
     *
     * @return string[]
     */
    public function getMarkupListingIds()
    {
        return $this->container['markup_listing_ids'];
    }

    /**
     * Sets markup_listing_ids
     *
     * @param string[] $markup_listing_ids A list of listing IDs to remove from a markdown promotion. The listed items are 'marked up' to their standard price after being part of the markdown promotion.
     *
     * @return $this
     */
    public function setMarkupListingIds($markup_listing_ids)
    {
        $this->container['markup_listing_ids'] = $markup_listing_ids;

        return $this;
    }

    /**
     * Gets selection_rules
     *
     * @return \Nopolabs\EBay\Sell\Marketing\Model\SelectionRule[]
     */
    public function getSelectionRules()
    {
        return $this->container['selection_rules'];
    }

    /**
     * Sets selection_rules
     *
     * @param \Nopolabs\EBay\Sell\Marketing\Model\SelectionRule[] $selection_rules Required if: inventoryCriterionType is set to INVENTORY_BY_RULE. The container for the rules that select the items to include in a promotion.
     *
     * @return $this
     */
    public function setSelectionRules($selection_rules)
    {
        $this->container['selection_rules'] = $selection_rules;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


