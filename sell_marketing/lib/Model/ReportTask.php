<?php
/**
 * ReportTask
 *
 * PHP version 5
 *
 * @category Class
 * @package  Nopolabs\EBay\Sell\Marketing
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Marketing API
 *
 * The Marketing API offers two platforms that let sellers promote and advertise their products: Promoted Listings is an eBay ad service that lets sellers set up ad campaigns for the products they want to promote. eBay displays the ads in search results and in other marketing modules as SPONSORED listings. If an item in a Promoted Listings campaign sells, the seller is assessed a Promoted Listings fee, which is a seller-specified percentage of the sales price. For complete details, see Promoted Listings. Promotions Manager gives sellers a way to offer discounts on specific items as a way to attract buyers to their inventory. Sellers can set up discounts (such as &quot;20% off&quot; and other types of offers) on specific items or on an entire customer order. To further attract buyers, eBay prominently displays promotion teasers throughout buyer flows. For complete details, see Promotions Manager. Marketing reports, on both the Promoted Listings and Promotions Manager platforms, give sellers information that shows the effectiveness of their marketing strategies. The data gives sellers the ability to review and fine tune their marketing efforts. Important! Sellers must have an active eBay Store subscription, and they must accept the Terms and Conditions before they can make requests to these APIs in the Production environment. There are also site-specific listings requirements and restrictions associated with these marketing tools, as listed in the &quot;requirements and restrictions&quot; sections for Promoted Listings and Promotions Manager. The table below lists all the Marketing API calls grouped by resource.
 *
 * OpenAPI spec version: v1.4.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Nopolabs\EBay\Sell\Marketing\Model;

use \ArrayAccess;
use \Nopolabs\EBay\Sell\Marketing\ObjectSerializer;

/**
 * ReportTask Class Doc Comment
 *
 * @category Class
 * @description This type defines the fields in a report task.
 * @package  Nopolabs\EBay\Sell\Marketing
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ReportTask implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ReportTask';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'campaign_ids' => 'string[]',
        'date_from' => 'string',
        'date_to' => 'string',
        'dimensions' => '\Nopolabs\EBay\Sell\Marketing\Model\Dimension[]',
        'inventory_references' => '\Nopolabs\EBay\Sell\Marketing\Model\InventoryReference[]',
        'listing_ids' => 'string[]',
        'marketplace_id' => 'string',
        'metric_keys' => 'string[]',
        'report_expiration_date' => 'string',
        'report_format' => 'string',
        'report_href' => 'string',
        'report_id' => 'string',
        'report_name' => 'string',
        'report_task_completion_date' => 'string',
        'report_task_creation_date' => 'string',
        'report_task_expected_completion_date' => 'string',
        'report_task_id' => 'string',
        'report_task_status' => 'string',
        'report_task_status_message' => 'string',
        'report_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'campaign_ids' => null,
        'date_from' => null,
        'date_to' => null,
        'dimensions' => null,
        'inventory_references' => null,
        'listing_ids' => null,
        'marketplace_id' => null,
        'metric_keys' => null,
        'report_expiration_date' => null,
        'report_format' => null,
        'report_href' => null,
        'report_id' => null,
        'report_name' => null,
        'report_task_completion_date' => null,
        'report_task_creation_date' => null,
        'report_task_expected_completion_date' => null,
        'report_task_id' => null,
        'report_task_status' => null,
        'report_task_status_message' => null,
        'report_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'campaign_ids' => 'campaignIds',
        'date_from' => 'dateFrom',
        'date_to' => 'dateTo',
        'dimensions' => 'dimensions',
        'inventory_references' => 'inventoryReferences',
        'listing_ids' => 'listingIds',
        'marketplace_id' => 'marketplaceId',
        'metric_keys' => 'metricKeys',
        'report_expiration_date' => 'reportExpirationDate',
        'report_format' => 'reportFormat',
        'report_href' => 'reportHref',
        'report_id' => 'reportId',
        'report_name' => 'reportName',
        'report_task_completion_date' => 'reportTaskCompletionDate',
        'report_task_creation_date' => 'reportTaskCreationDate',
        'report_task_expected_completion_date' => 'reportTaskExpectedCompletionDate',
        'report_task_id' => 'reportTaskId',
        'report_task_status' => 'reportTaskStatus',
        'report_task_status_message' => 'reportTaskStatusMessage',
        'report_type' => 'reportType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'campaign_ids' => 'setCampaignIds',
        'date_from' => 'setDateFrom',
        'date_to' => 'setDateTo',
        'dimensions' => 'setDimensions',
        'inventory_references' => 'setInventoryReferences',
        'listing_ids' => 'setListingIds',
        'marketplace_id' => 'setMarketplaceId',
        'metric_keys' => 'setMetricKeys',
        'report_expiration_date' => 'setReportExpirationDate',
        'report_format' => 'setReportFormat',
        'report_href' => 'setReportHref',
        'report_id' => 'setReportId',
        'report_name' => 'setReportName',
        'report_task_completion_date' => 'setReportTaskCompletionDate',
        'report_task_creation_date' => 'setReportTaskCreationDate',
        'report_task_expected_completion_date' => 'setReportTaskExpectedCompletionDate',
        'report_task_id' => 'setReportTaskId',
        'report_task_status' => 'setReportTaskStatus',
        'report_task_status_message' => 'setReportTaskStatusMessage',
        'report_type' => 'setReportType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'campaign_ids' => 'getCampaignIds',
        'date_from' => 'getDateFrom',
        'date_to' => 'getDateTo',
        'dimensions' => 'getDimensions',
        'inventory_references' => 'getInventoryReferences',
        'listing_ids' => 'getListingIds',
        'marketplace_id' => 'getMarketplaceId',
        'metric_keys' => 'getMetricKeys',
        'report_expiration_date' => 'getReportExpirationDate',
        'report_format' => 'getReportFormat',
        'report_href' => 'getReportHref',
        'report_id' => 'getReportId',
        'report_name' => 'getReportName',
        'report_task_completion_date' => 'getReportTaskCompletionDate',
        'report_task_creation_date' => 'getReportTaskCreationDate',
        'report_task_expected_completion_date' => 'getReportTaskExpectedCompletionDate',
        'report_task_id' => 'getReportTaskId',
        'report_task_status' => 'getReportTaskStatus',
        'report_task_status_message' => 'getReportTaskStatusMessage',
        'report_type' => 'getReportType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['campaign_ids'] = isset($data['campaign_ids']) ? $data['campaign_ids'] : null;
        $this->container['date_from'] = isset($data['date_from']) ? $data['date_from'] : null;
        $this->container['date_to'] = isset($data['date_to']) ? $data['date_to'] : null;
        $this->container['dimensions'] = isset($data['dimensions']) ? $data['dimensions'] : null;
        $this->container['inventory_references'] = isset($data['inventory_references']) ? $data['inventory_references'] : null;
        $this->container['listing_ids'] = isset($data['listing_ids']) ? $data['listing_ids'] : null;
        $this->container['marketplace_id'] = isset($data['marketplace_id']) ? $data['marketplace_id'] : null;
        $this->container['metric_keys'] = isset($data['metric_keys']) ? $data['metric_keys'] : null;
        $this->container['report_expiration_date'] = isset($data['report_expiration_date']) ? $data['report_expiration_date'] : null;
        $this->container['report_format'] = isset($data['report_format']) ? $data['report_format'] : null;
        $this->container['report_href'] = isset($data['report_href']) ? $data['report_href'] : null;
        $this->container['report_id'] = isset($data['report_id']) ? $data['report_id'] : null;
        $this->container['report_name'] = isset($data['report_name']) ? $data['report_name'] : null;
        $this->container['report_task_completion_date'] = isset($data['report_task_completion_date']) ? $data['report_task_completion_date'] : null;
        $this->container['report_task_creation_date'] = isset($data['report_task_creation_date']) ? $data['report_task_creation_date'] : null;
        $this->container['report_task_expected_completion_date'] = isset($data['report_task_expected_completion_date']) ? $data['report_task_expected_completion_date'] : null;
        $this->container['report_task_id'] = isset($data['report_task_id']) ? $data['report_task_id'] : null;
        $this->container['report_task_status'] = isset($data['report_task_status']) ? $data['report_task_status'] : null;
        $this->container['report_task_status_message'] = isset($data['report_task_status_message']) ? $data['report_task_status_message'] : null;
        $this->container['report_type'] = isset($data['report_type']) ? $data['report_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets campaign_ids
     *
     * @return string[]
     */
    public function getCampaignIds()
    {
        return $this->container['campaign_ids'];
    }

    /**
     * Sets campaign_ids
     *
     * @param string[] $campaign_ids A list of campaign IDs to be included in the report. A campaign ID is a unique eBay-assigned identifier of the campaign that's generated when the campaign is created. Call getCampaigns to return the current campaign IDs for a seller. Note: Currently, you can specify only one campaign ID.
     *
     * @return $this
     */
    public function setCampaignIds($campaign_ids)
    {
        $this->container['campaign_ids'] = $campaign_ids;

        return $this;
    }

    /**
     * Gets date_from
     *
     * @return string
     */
    public function getDateFrom()
    {
        return $this->container['date_from'];
    }

    /**
     * Sets date_from
     *
     * @param string $date_from The date and time defining the start of the timespan covered by the report. For display purposes, convert this time into the local time of the seller. Valid format (UTC): yyyy-MM-ddThh:mm:ss.sssZ
     *
     * @return $this
     */
    public function setDateFrom($date_from)
    {
        $this->container['date_from'] = $date_from;

        return $this;
    }

    /**
     * Gets date_to
     *
     * @return string
     */
    public function getDateTo()
    {
        return $this->container['date_to'];
    }

    /**
     * Sets date_to
     *
     * @param string $date_to The date and time defining the end of the report timespan. For display purposes, convert this time into the local time of the seller. Valid format (UTC): yyyy-MM-ddThh:mm:ss.sssZ
     *
     * @return $this
     */
    public function setDateTo($date_to)
    {
        $this->container['date_to'] = $date_to;

        return $this;
    }

    /**
     * Gets dimensions
     *
     * @return \Nopolabs\EBay\Sell\Marketing\Model\Dimension[]
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     *
     * @param \Nopolabs\EBay\Sell\Marketing\Model\Dimension[] $dimensions A list containing the dimension in the report.
     *
     * @return $this
     */
    public function setDimensions($dimensions)
    {
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets inventory_references
     *
     * @return \Nopolabs\EBay\Sell\Marketing\Model\InventoryReference[]
     */
    public function getInventoryReferences()
    {
        return $this->container['inventory_references'];
    }

    /**
     * Sets inventory_references
     *
     * @param \Nopolabs\EBay\Sell\Marketing\Model\InventoryReference[] $inventory_references A list of the seller's inventory reference IDs to be included in the report. An inventory reference ID can be either a seller-defined SKU value or an inventoryItemGroupKey. An inventoryItemGroupKey is seller-defined ID for an inventory item group (a multiple-variation listing), and is created and used by the Inventory API.
     *
     * @return $this
     */
    public function setInventoryReferences($inventory_references)
    {
        $this->container['inventory_references'] = $inventory_references;

        return $this;
    }

    /**
     * Gets listing_ids
     *
     * @return string[]
     */
    public function getListingIds()
    {
        return $this->container['listing_ids'];
    }

    /**
     * Sets listing_ids
     *
     * @param string[] $listing_ids A list of the listing IDs to be included in the report. A listing ID is an eBay-assigned ID that's generated when a listing is created. Note: This field accepts both a listingId, as generated by the Inventory API, and an itemId as used in the eBay Traditional API set (e.g., the Trading and Finding APIs).
     *
     * @return $this
     */
    public function setListingIds($listing_ids)
    {
        $this->container['listing_ids'] = $listing_ids;

        return $this;
    }

    /**
     * Gets marketplace_id
     *
     * @return string
     */
    public function getMarketplaceId()
    {
        return $this->container['marketplace_id'];
    }

    /**
     * Sets marketplace_id
     *
     * @param string $marketplace_id The ID of the eBay marketplace used by the report task. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/marketing/types/MarketplaceIdEnum.html'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setMarketplaceId($marketplace_id)
    {
        $this->container['marketplace_id'] = $marketplace_id;

        return $this;
    }

    /**
     * Gets metric_keys
     *
     * @return string[]
     */
    public function getMetricKeys()
    {
        return $this->container['metric_keys'];
    }

    /**
     * Sets metric_keys
     *
     * @param string[] $metric_keys A list of metrics for the report task.
     *
     * @return $this
     */
    public function setMetricKeys($metric_keys)
    {
        $this->container['metric_keys'] = $metric_keys;

        return $this;
    }

    /**
     * Gets report_expiration_date
     *
     * @return string
     */
    public function getReportExpirationDate()
    {
        return $this->container['report_expiration_date'];
    }

    /**
     * Sets report_expiration_date
     *
     * @param string $report_expiration_date The date after which the report is no longer be available. Reports are available for 30 days and you cannot download a report after it has expired. For display purposes, convert this time into the local time of the seller. Format (UTC): yyyy-MM-ddThh:mm:ss.sssZ
     *
     * @return $this
     */
    public function setReportExpirationDate($report_expiration_date)
    {
        $this->container['report_expiration_date'] = $report_expiration_date;

        return $this;
    }

    /**
     * Gets report_format
     *
     * @return string
     */
    public function getReportFormat()
    {
        return $this->container['report_format'];
    }

    /**
     * Sets report_format
     *
     * @param string $report_format Indicates the format of the report. Currently, only TSV_GZIP is supported. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/marketing/types/ReportFormatEnum.html'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setReportFormat($report_format)
    {
        $this->container['report_format'] = $report_format;

        return $this;
    }

    /**
     * Gets report_href
     *
     * @return string
     */
    public function getReportHref()
    {
        return $this->container['report_href'];
    }

    /**
     * Sets report_href
     *
     * @param string $report_href The URL of the generated report, which can be used to download the report once it has been generated.
     *
     * @return $this
     */
    public function setReportHref($report_href)
    {
        $this->container['report_href'] = $report_href;

        return $this;
    }

    /**
     * Gets report_id
     *
     * @return string
     */
    public function getReportId()
    {
        return $this->container['report_id'];
    }

    /**
     * Sets report_id
     *
     * @param string $report_id A unique eBay-assigned ID for the report.
     *
     * @return $this
     */
    public function setReportId($report_id)
    {
        $this->container['report_id'] = $report_id;

        return $this;
    }

    /**
     * Gets report_name
     *
     * @return string
     */
    public function getReportName()
    {
        return $this->container['report_name'];
    }

    /**
     * Sets report_name
     *
     * @param string $report_name An eBay-assigned name for the report that's created by the createReportTask call. This name is unique for the seller.
     *
     * @return $this
     */
    public function setReportName($report_name)
    {
        $this->container['report_name'] = $report_name;

        return $this;
    }

    /**
     * Gets report_task_completion_date
     *
     * @return string
     */
    public function getReportTaskCompletionDate()
    {
        return $this->container['report_task_completion_date'];
    }

    /**
     * Sets report_task_completion_date
     *
     * @param string $report_task_completion_date The date the report task completed the report generation. For display purposes, convert this time into the local time of the seller. Format (UTC): yyyy-MM-ddThh:mm:ss.sssZ
     *
     * @return $this
     */
    public function setReportTaskCompletionDate($report_task_completion_date)
    {
        $this->container['report_task_completion_date'] = $report_task_completion_date;

        return $this;
    }

    /**
     * Gets report_task_creation_date
     *
     * @return string
     */
    public function getReportTaskCreationDate()
    {
        return $this->container['report_task_creation_date'];
    }

    /**
     * Sets report_task_creation_date
     *
     * @param string $report_task_creation_date The date the report task was created. For display purposes, convert this time into the local time of the seller. Format (UTC): yyyy-MM-ddThh:mm:ss.sssZ
     *
     * @return $this
     */
    public function setReportTaskCreationDate($report_task_creation_date)
    {
        $this->container['report_task_creation_date'] = $report_task_creation_date;

        return $this;
    }

    /**
     * Gets report_task_expected_completion_date
     *
     * @return string
     */
    public function getReportTaskExpectedCompletionDate()
    {
        return $this->container['report_task_expected_completion_date'];
    }

    /**
     * Sets report_task_expected_completion_date
     *
     * @param string $report_task_expected_completion_date The date the report task is expected to complete the report generation. For display purposes, convert this time into the local time of the seller. Format (UTC): yyyy-MM-ddThh:mm:ss.sssZ
     *
     * @return $this
     */
    public function setReportTaskExpectedCompletionDate($report_task_expected_completion_date)
    {
        $this->container['report_task_expected_completion_date'] = $report_task_expected_completion_date;

        return $this;
    }

    /**
     * Gets report_task_id
     *
     * @return string
     */
    public function getReportTaskId()
    {
        return $this->container['report_task_id'];
    }

    /**
     * Sets report_task_id
     *
     * @param string $report_task_id The unique eBay-assigned ID of the report task. This value is generated when the report task is created with a call to createReportTask.
     *
     * @return $this
     */
    public function setReportTaskId($report_task_id)
    {
        $this->container['report_task_id'] = $report_task_id;

        return $this;
    }

    /**
     * Gets report_task_status
     *
     * @return string
     */
    public function getReportTaskStatus()
    {
        return $this->container['report_task_status'];
    }

    /**
     * Sets report_task_status
     *
     * @param string $report_task_status Indicates the current state of the report task. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/marketing/types/TaskStatusEnum.html'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setReportTaskStatus($report_task_status)
    {
        $this->container['report_task_status'] = $report_task_status;

        return $this;
    }

    /**
     * Gets report_task_status_message
     *
     * @return string
     */
    public function getReportTaskStatusMessage()
    {
        return $this->container['report_task_status_message'];
    }

    /**
     * Sets report_task_status_message
     *
     * @param string $report_task_status_message A status message with additional information about the report task.
     *
     * @return $this
     */
    public function setReportTaskStatusMessage($report_task_status_message)
    {
        $this->container['report_task_status_message'] = $report_task_status_message;

        return $this;
    }

    /**
     * Gets report_type
     *
     * @return string
     */
    public function getReportType()
    {
        return $this->container['report_type'];
    }

    /**
     * Sets report_type
     *
     * @param string $report_type Indicates type of report associated with the report task. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/marketing/types/ReportTypeEnum.html'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setReportType($report_type)
    {
        $this->container['report_type'] = $report_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


