<?php
/**
 * Violation
 *
 * PHP version 5
 *
 * @category Class
 * @package  Nopolabs\EBay\Commerce\Catalog
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Catalog API
 *
 * Use the Catalog API to search the eBay catalog for products on which to base a seller's item listing; to retrieve a product record by its eBay product identifier (ePID); to submit a catalog change request to modify an existing product or create a new product; and to manage catalog change requests.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Nopolabs\EBay\Commerce\Catalog\Model;

use \ArrayAccess;
use \Nopolabs\EBay\Commerce\Catalog\ObjectSerializer;

/**
 * Violation Class Doc Comment
 *
 * @category Class
 * @description This type contains information about a violation of eBay standards in a change request.
 * @package  Nopolabs\EBay\Commerce\Catalog
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Violation implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Violation';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'aspects_values' => '\Nopolabs\EBay\Commerce\Catalog\Model\ViolationAspectValues',
        'product_attribute' => '\Nopolabs\EBay\Commerce\Catalog\Model\ViolationProductAttribute',
        'reason' => 'string',
        'violation_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'aspects_values' => null,
        'product_attribute' => null,
        'reason' => null,
        'violation_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aspects_values' => 'aspectsValues',
        'product_attribute' => 'productAttribute',
        'reason' => 'reason',
        'violation_code' => 'violationCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aspects_values' => 'setAspectsValues',
        'product_attribute' => 'setProductAttribute',
        'reason' => 'setReason',
        'violation_code' => 'setViolationCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aspects_values' => 'getAspectsValues',
        'product_attribute' => 'getProductAttribute',
        'reason' => 'getReason',
        'violation_code' => 'getViolationCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['aspects_values'] = isset($data['aspects_values']) ? $data['aspects_values'] : null;
        $this->container['product_attribute'] = isset($data['product_attribute']) ? $data['product_attribute'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['violation_code'] = isset($data['violation_code']) ? $data['violation_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets aspects_values
     *
     * @return \Nopolabs\EBay\Commerce\Catalog\Model\ViolationAspectValues
     */
    public function getAspectsValues()
    {
        return $this->container['aspects_values'];
    }

    /**
     * Sets aspects_values
     *
     * @param \Nopolabs\EBay\Commerce\Catalog\Model\ViolationAspectValues $aspects_values aspects_values
     *
     * @return $this
     */
    public function setAspectsValues($aspects_values)
    {
        $this->container['aspects_values'] = $aspects_values;

        return $this;
    }

    /**
     * Gets product_attribute
     *
     * @return \Nopolabs\EBay\Commerce\Catalog\Model\ViolationProductAttribute
     */
    public function getProductAttribute()
    {
        return $this->container['product_attribute'];
    }

    /**
     * Sets product_attribute
     *
     * @param \Nopolabs\EBay\Commerce\Catalog\Model\ViolationProductAttribute $product_attribute product_attribute
     *
     * @return $this
     */
    public function setProductAttribute($product_attribute)
    {
        $this->container['product_attribute'] = $product_attribute;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason An explanation of the reason for this violation.
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets violation_code
     *
     * @return string
     */
    public function getViolationCode()
    {
        return $this->container['violation_code'];
    }

    /**
     * Sets violation_code
     *
     * @param string $violation_code The eBay-assigned identifier of the violation type of this violation.
     *
     * @return $this
     */
    public function setViolationCode($violation_code)
    {
        $this->container['violation_code'] = $violation_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


