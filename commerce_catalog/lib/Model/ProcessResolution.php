<?php
/**
 * ProcessResolution
 *
 * PHP version 5
 *
 * @category Class
 * @package  Nopolabs\EBay\Commerce\Catalog
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Catalog API
 *
 * Use the Catalog API to search the eBay catalog for products on which to base a seller's item listing; to retrieve a product record by its eBay product identifier (ePID); to submit a catalog change request to modify an existing product or create a new product; and to manage catalog change requests.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Nopolabs\EBay\Commerce\Catalog\Model;

use \ArrayAccess;
use \Nopolabs\EBay\Commerce\Catalog\ObjectSerializer;

/**
 * ProcessResolution Class Doc Comment
 *
 * @category Class
 * @description This type provides details of conflicting products, corrections required, or violations that were discovered in a change request.
 * @package  Nopolabs\EBay\Commerce\Catalog
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProcessResolution implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProcessResolution';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'conflicting_products' => '\Nopolabs\EBay\Commerce\Catalog\Model\ConflictingProduct[]',
        'corrections' => '\Nopolabs\EBay\Commerce\Catalog\Model\Correction[]',
        'epid' => 'string',
        'product_href' => 'string',
        'violations' => '\Nopolabs\EBay\Commerce\Catalog\Model\Violation[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'conflicting_products' => null,
        'corrections' => null,
        'epid' => null,
        'product_href' => null,
        'violations' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'conflicting_products' => 'conflictingProducts',
        'corrections' => 'corrections',
        'epid' => 'epid',
        'product_href' => 'productHref',
        'violations' => 'violations'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'conflicting_products' => 'setConflictingProducts',
        'corrections' => 'setCorrections',
        'epid' => 'setEpid',
        'product_href' => 'setProductHref',
        'violations' => 'setViolations'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'conflicting_products' => 'getConflictingProducts',
        'corrections' => 'getCorrections',
        'epid' => 'getEpid',
        'product_href' => 'getProductHref',
        'violations' => 'getViolations'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['conflicting_products'] = isset($data['conflicting_products']) ? $data['conflicting_products'] : null;
        $this->container['corrections'] = isset($data['corrections']) ? $data['corrections'] : null;
        $this->container['epid'] = isset($data['epid']) ? $data['epid'] : null;
        $this->container['product_href'] = isset($data['product_href']) ? $data['product_href'] : null;
        $this->container['violations'] = isset($data['violations']) ? $data['violations'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets conflicting_products
     *
     * @return \Nopolabs\EBay\Commerce\Catalog\Model\ConflictingProduct[]
     */
    public function getConflictingProducts()
    {
        return $this->container['conflicting_products'];
    }

    /**
     * Sets conflicting_products
     *
     * @param \Nopolabs\EBay\Commerce\Catalog\Model\ConflictingProduct[] $conflicting_products Contains information about one or more existing products with identifying information that matches or instersects with the suggested product. For each conflicting product, the difference is in the presence or value of one or more product aspects. If the seller accepts the aspects and their values of the conflicting product (such as a color value of scarlet instead of crimson), that product can be adopted by the seller instead of the suggested product. If the seller does not accept any of the conflicting products as is, you can submit a change request to update one of them, or to create a new product for which identifying information doesn't overlap with an existing product enough to produce a conflict.
     *
     * @return $this
     */
    public function setConflictingProducts($conflicting_products)
    {
        $this->container['conflicting_products'] = $conflicting_products;

        return $this;
    }

    /**
     * Gets corrections
     *
     * @return \Nopolabs\EBay\Commerce\Catalog\Model\Correction[]
     */
    public function getCorrections()
    {
        return $this->container['corrections'];
    }

    /**
     * Sets corrections
     *
     * @param \Nopolabs\EBay\Commerce\Catalog\Model\Correction[] $corrections Contains information about one or more corrections to this change request that eBay has applied to the new or updated product. Sellers can accept these corrections by adopting the product, which is identified by the epid field.
     *
     * @return $this
     */
    public function setCorrections($corrections)
    {
        $this->container['corrections'] = $corrections;

        return $this;
    }

    /**
     * Gets epid
     *
     * @return string
     */
    public function getEpid()
    {
        return $this->container['epid'];
    }

    /**
     * Sets epid
     *
     * @param string $epid Returned only if the value of changeRequestStatus is APPROVED or APPROVED_WITH_MODIFICATIONS; this is the eBay identifier of the resulting product.
     *
     * @return $this
     */
    public function setEpid($epid)
    {
        $this->container['epid'] = $epid;

        return $this;
    }

    /**
     * Gets product_href
     *
     * @return string
     */
    public function getProductHref()
    {
        return $this->container['product_href'];
    }

    /**
     * Sets product_href
     *
     * @param string $product_href The URI of the getProduct call request that retrieves this product's details. This field is returned under one of the following conditions: The value of changeRequestType is PRODUCT_UPDATE. The value of changeRequestType is PRODUCT_CREATION, and the value of changeRequestStatus is APPROVED or APPROVED_WITH_MODIFICATIONS.
     *
     * @return $this
     */
    public function setProductHref($product_href)
    {
        $this->container['product_href'] = $product_href;

        return $this;
    }

    /**
     * Gets violations
     *
     * @return \Nopolabs\EBay\Commerce\Catalog\Model\Violation[]
     */
    public function getViolations()
    {
        return $this->container['violations'];
    }

    /**
     * Sets violations
     *
     * @param \Nopolabs\EBay\Commerce\Catalog\Model\Violation[] $violations Contains information about one or more violations in the values of the suggested product's aspects or fixed attributes.
     *
     * @return $this
     */
    public function setViolations($violations)
    {
        $this->container['violations'] = $violations;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


