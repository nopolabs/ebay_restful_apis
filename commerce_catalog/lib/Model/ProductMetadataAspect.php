<?php
/**
 * ProductMetadataAspect
 *
 * PHP version 5
 *
 * @category Class
 * @package  Nopolabs\EBay\Commerce\Catalog
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Catalog API
 *
 * Use the Catalog API to search the eBay catalog for products on which to base a seller's item listing; to retrieve a product record by its eBay product identifier (ePID); to submit a catalog change request to modify an existing product or create a new product; and to manage catalog change requests.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Nopolabs\EBay\Commerce\Catalog\Model;

use \ArrayAccess;
use \Nopolabs\EBay\Commerce\Catalog\ObjectSerializer;

/**
 * ProductMetadataAspect Class Doc Comment
 *
 * @category Class
 * @description This type contains detailed information about an aspect that&#39;s supported for a given eBay Catalog product. These details include the aspect name, current value(s), supported/possible values, and constraint information.
 * @package  Nopolabs\EBay\Commerce\Catalog
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductMetadataAspect implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ProductMetadataAspect';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'aspect_help_text' => 'string',
        'constraint' => '\Nopolabs\EBay\Commerce\Catalog\Model\ProductAspectConstraint',
        'droppable' => 'bool',
        'name' => 'string',
        'values' => '\Nopolabs\EBay\Commerce\Catalog\Model\ProductAspectValue[]',
        'values_associated_with_product' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'aspect_help_text' => null,
        'constraint' => null,
        'droppable' => null,
        'name' => null,
        'values' => null,
        'values_associated_with_product' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'aspect_help_text' => 'aspectHelpText',
        'constraint' => 'constraint',
        'droppable' => 'droppable',
        'name' => 'name',
        'values' => 'values',
        'values_associated_with_product' => 'valuesAssociatedWithProduct'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'aspect_help_text' => 'setAspectHelpText',
        'constraint' => 'setConstraint',
        'droppable' => 'setDroppable',
        'name' => 'setName',
        'values' => 'setValues',
        'values_associated_with_product' => 'setValuesAssociatedWithProduct'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'aspect_help_text' => 'getAspectHelpText',
        'constraint' => 'getConstraint',
        'droppable' => 'getDroppable',
        'name' => 'getName',
        'values' => 'getValues',
        'values_associated_with_product' => 'getValuesAssociatedWithProduct'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['aspect_help_text'] = isset($data['aspect_help_text']) ? $data['aspect_help_text'] : null;
        $this->container['constraint'] = isset($data['constraint']) ? $data['constraint'] : null;
        $this->container['droppable'] = isset($data['droppable']) ? $data['droppable'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['values'] = isset($data['values']) ? $data['values'] : null;
        $this->container['values_associated_with_product'] = isset($data['values_associated_with_product']) ? $data['values_associated_with_product'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets aspect_help_text
     *
     * @return string
     */
    public function getAspectHelpText()
    {
        return $this->container['aspect_help_text'];
    }

    /**
     * Sets aspect_help_text
     *
     * @param string $aspect_help_text Returned only if this field is populated. This provides information and context for the product aspect. The help text can be presented to the seller to clarify the intended purpose of the aspect, and recommendations for its use. For example, the help text for the Country/Region of Manufacture aspect is: Specifying the country/region of manufacture can help streamline customs clearance.
     *
     * @return $this
     */
    public function setAspectHelpText($aspect_help_text)
    {
        $this->container['aspect_help_text'] = $aspect_help_text;

        return $this;
    }

    /**
     * Gets constraint
     *
     * @return \Nopolabs\EBay\Commerce\Catalog\Model\ProductAspectConstraint
     */
    public function getConstraint()
    {
        return $this->container['constraint'];
    }

    /**
     * Sets constraint
     *
     * @param \Nopolabs\EBay\Commerce\Catalog\Model\ProductAspectConstraint $constraint constraint
     *
     * @return $this
     */
    public function setConstraint($constraint)
    {
        $this->container['constraint'] = $constraint;

        return $this;
    }

    /**
     * Gets droppable
     *
     * @return bool
     */
    public function getDroppable()
    {
        return $this->container['droppable'];
    }

    /**
     * Sets droppable
     *
     * @param bool $droppable A value of true indicates that this product aspect can be removed from the specified catalog product definition by omitting it from a product change request. A value of false indicates that this product aspect cannot be dropped (although it is possible that its value could be modified).
     *
     * @return $this
     */
    public function setDroppable($droppable)
    {
        $this->container['droppable'] = $droppable;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name The name of the product aspect, such as Model Number, Size, or Color.
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets values
     *
     * @return \Nopolabs\EBay\Commerce\Catalog\Model\ProductAspectValue[]
     */
    public function getValues()
    {
        return $this->container['values'];
    }

    /**
     * Sets values
     *
     * @param \Nopolabs\EBay\Commerce\Catalog\Model\ProductAspectValue[] $values Not returned if the value of the constraint field is FREE_TEXT and there are no stored values for this aspect. Contains information about the supported values for the product aspect identified by the name field, as well as constraint information for the product aspect values. These values can be used instead of the product aspect value(s) currently defined for the eBay Catalog product, and those specified in the valuesAssociatedWithProduct array.
     *
     * @return $this
     */
    public function setValues($values)
    {
        $this->container['values'] = $values;

        return $this;
    }

    /**
     * Gets values_associated_with_product
     *
     * @return string[]
     */
    public function getValuesAssociatedWithProduct()
    {
        return $this->container['values_associated_with_product'];
    }

    /**
     * Sets values_associated_with_product
     *
     * @param string[] $values_associated_with_product The value(s) currently defined for the eBay Catalog product for the product aspect identified by the corresponding name field.
     *
     * @return $this
     */
    public function setValuesAssociatedWithProduct($values_associated_with_product)
    {
        $this->container['values_associated_with_product'] = $values_associated_with_product;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


