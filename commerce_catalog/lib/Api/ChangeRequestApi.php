<?php
/**
 * ChangeRequestApi
 * PHP version 5
 *
 * @category Class
 * @package  Nopolabs\EBay\Commerce\Catalog
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Catalog API
 *
 * Use the Catalog API to search the eBay catalog for products on which to base a seller's item listing; to retrieve a product record by its eBay product identifier (ePID); to submit a catalog change request to modify an existing product or create a new product; and to manage catalog change requests.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Nopolabs\EBay\Commerce\Catalog\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Nopolabs\EBay\Commerce\Catalog\ApiException;
use Nopolabs\EBay\Commerce\Catalog\Configuration;
use Nopolabs\EBay\Commerce\Catalog\HeaderSelector;
use Nopolabs\EBay\Commerce\Catalog\ObjectSerializer;

/**
 * ChangeRequestApi Class Doc Comment
 *
 * @category Class
 * @package  Nopolabs\EBay\Commerce\Catalog
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ChangeRequestApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createChangeRequest
     *
     * @param  string $x_ebay_c_marketplace_id Use this header to identify the authenticated user&#39;s business context. This header is currently limited to EBAY_US, EBAY_AU, EBAY_CA, and EBAY_GB values. If not included with your request, the marketplace value defaults to EBAY_US. Note that it does not indicate a language preference or end-user location. (required)
     * @param  string $accept_language Use this header to specify the natural language in which the authenticated user desires the response. (optional)
     * @param  \Nopolabs\EBay\Commerce\Catalog\Model\CreateChangeRequestPayload $body Contains the full details of a specified catalog change request, including the type of request, the reason for a product update request, and the details of the new or updated product being suggested. (optional)
     *
     * @throws \Nopolabs\EBay\Commerce\Catalog\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createChangeRequest($x_ebay_c_marketplace_id, $accept_language = null, $body = null)
    {
        $this->createChangeRequestWithHttpInfo($x_ebay_c_marketplace_id, $accept_language, $body);
    }

    /**
     * Operation createChangeRequestWithHttpInfo
     *
     * @param  string $x_ebay_c_marketplace_id Use this header to identify the authenticated user&#39;s business context. This header is currently limited to EBAY_US, EBAY_AU, EBAY_CA, and EBAY_GB values. If not included with your request, the marketplace value defaults to EBAY_US. Note that it does not indicate a language preference or end-user location. (required)
     * @param  string $accept_language Use this header to specify the natural language in which the authenticated user desires the response. (optional)
     * @param  \Nopolabs\EBay\Commerce\Catalog\Model\CreateChangeRequestPayload $body Contains the full details of a specified catalog change request, including the type of request, the reason for a product update request, and the details of the new or updated product being suggested. (optional)
     *
     * @throws \Nopolabs\EBay\Commerce\Catalog\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createChangeRequestWithHttpInfo($x_ebay_c_marketplace_id, $accept_language = null, $body = null)
    {
        $returnType = '';
        $request = $this->createChangeRequestRequest($x_ebay_c_marketplace_id, $accept_language, $body);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createChangeRequestAsync
     *
     * 
     *
     * @param  string $x_ebay_c_marketplace_id Use this header to identify the authenticated user&#39;s business context. This header is currently limited to EBAY_US, EBAY_AU, EBAY_CA, and EBAY_GB values. If not included with your request, the marketplace value defaults to EBAY_US. Note that it does not indicate a language preference or end-user location. (required)
     * @param  string $accept_language Use this header to specify the natural language in which the authenticated user desires the response. (optional)
     * @param  \Nopolabs\EBay\Commerce\Catalog\Model\CreateChangeRequestPayload $body Contains the full details of a specified catalog change request, including the type of request, the reason for a product update request, and the details of the new or updated product being suggested. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createChangeRequestAsync($x_ebay_c_marketplace_id, $accept_language = null, $body = null)
    {
        return $this->createChangeRequestAsyncWithHttpInfo($x_ebay_c_marketplace_id, $accept_language, $body)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createChangeRequestAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $x_ebay_c_marketplace_id Use this header to identify the authenticated user&#39;s business context. This header is currently limited to EBAY_US, EBAY_AU, EBAY_CA, and EBAY_GB values. If not included with your request, the marketplace value defaults to EBAY_US. Note that it does not indicate a language preference or end-user location. (required)
     * @param  string $accept_language Use this header to specify the natural language in which the authenticated user desires the response. (optional)
     * @param  \Nopolabs\EBay\Commerce\Catalog\Model\CreateChangeRequestPayload $body Contains the full details of a specified catalog change request, including the type of request, the reason for a product update request, and the details of the new or updated product being suggested. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createChangeRequestAsyncWithHttpInfo($x_ebay_c_marketplace_id, $accept_language = null, $body = null)
    {
        $returnType = '';
        $request = $this->createChangeRequestRequest($x_ebay_c_marketplace_id, $accept_language, $body);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createChangeRequest'
     *
     * @param  string $x_ebay_c_marketplace_id Use this header to identify the authenticated user&#39;s business context. This header is currently limited to EBAY_US, EBAY_AU, EBAY_CA, and EBAY_GB values. If not included with your request, the marketplace value defaults to EBAY_US. Note that it does not indicate a language preference or end-user location. (required)
     * @param  string $accept_language Use this header to specify the natural language in which the authenticated user desires the response. (optional)
     * @param  \Nopolabs\EBay\Commerce\Catalog\Model\CreateChangeRequestPayload $body Contains the full details of a specified catalog change request, including the type of request, the reason for a product update request, and the details of the new or updated product being suggested. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function createChangeRequestRequest($x_ebay_c_marketplace_id, $accept_language = null, $body = null)
    {
        // verify the required parameter 'x_ebay_c_marketplace_id' is set
        if ($x_ebay_c_marketplace_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_ebay_c_marketplace_id when calling createChangeRequest'
            );
        }

        $resourcePath = '/change_request';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_ebay_c_marketplace_id !== null) {
            $headerParams['X-EBAY-C-MARKETPLACE-ID'] = ObjectSerializer::toHeaderValue($x_ebay_c_marketplace_id);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }


        // body params
        $_tempBody = null;
        if (isset($body)) {
            $_tempBody = $body;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getChangeRequest
     *
     * @param  string $x_ebay_c_marketplace_id Use this header to identify the authenticated user&#39;s business context. This header is currently limited to EBAY_US, EBAY_AU, EBAY_CA, and EBAY_GB values. If not included with your request, the marketplace value defaults to EBAY_US. Note that it does not indicate a language preference or end-user location. (required)
     * @param  string $change_request_id The unique identifier of the change request being requested. This value was originally generated by the createChangeRequest call, and is returned by the getChangeRequests call in the changeRequests.changeRequestId field. (required)
     * @param  string $accept_language Use this header to specify the natural language in which the authenticated user desires the response. (optional)
     *
     * @throws \Nopolabs\EBay\Commerce\Catalog\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Nopolabs\EBay\Commerce\Catalog\Model\ChangeRequest
     */
    public function getChangeRequest($x_ebay_c_marketplace_id, $change_request_id, $accept_language = null)
    {
        list($response) = $this->getChangeRequestWithHttpInfo($x_ebay_c_marketplace_id, $change_request_id, $accept_language);
        return $response;
    }

    /**
     * Operation getChangeRequestWithHttpInfo
     *
     * @param  string $x_ebay_c_marketplace_id Use this header to identify the authenticated user&#39;s business context. This header is currently limited to EBAY_US, EBAY_AU, EBAY_CA, and EBAY_GB values. If not included with your request, the marketplace value defaults to EBAY_US. Note that it does not indicate a language preference or end-user location. (required)
     * @param  string $change_request_id The unique identifier of the change request being requested. This value was originally generated by the createChangeRequest call, and is returned by the getChangeRequests call in the changeRequests.changeRequestId field. (required)
     * @param  string $accept_language Use this header to specify the natural language in which the authenticated user desires the response. (optional)
     *
     * @throws \Nopolabs\EBay\Commerce\Catalog\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Nopolabs\EBay\Commerce\Catalog\Model\ChangeRequest, HTTP status code, HTTP response headers (array of strings)
     */
    public function getChangeRequestWithHttpInfo($x_ebay_c_marketplace_id, $change_request_id, $accept_language = null)
    {
        $returnType = '\Nopolabs\EBay\Commerce\Catalog\Model\ChangeRequest';
        $request = $this->getChangeRequestRequest($x_ebay_c_marketplace_id, $change_request_id, $accept_language);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nopolabs\EBay\Commerce\Catalog\Model\ChangeRequest',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getChangeRequestAsync
     *
     * 
     *
     * @param  string $x_ebay_c_marketplace_id Use this header to identify the authenticated user&#39;s business context. This header is currently limited to EBAY_US, EBAY_AU, EBAY_CA, and EBAY_GB values. If not included with your request, the marketplace value defaults to EBAY_US. Note that it does not indicate a language preference or end-user location. (required)
     * @param  string $change_request_id The unique identifier of the change request being requested. This value was originally generated by the createChangeRequest call, and is returned by the getChangeRequests call in the changeRequests.changeRequestId field. (required)
     * @param  string $accept_language Use this header to specify the natural language in which the authenticated user desires the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChangeRequestAsync($x_ebay_c_marketplace_id, $change_request_id, $accept_language = null)
    {
        return $this->getChangeRequestAsyncWithHttpInfo($x_ebay_c_marketplace_id, $change_request_id, $accept_language)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getChangeRequestAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $x_ebay_c_marketplace_id Use this header to identify the authenticated user&#39;s business context. This header is currently limited to EBAY_US, EBAY_AU, EBAY_CA, and EBAY_GB values. If not included with your request, the marketplace value defaults to EBAY_US. Note that it does not indicate a language preference or end-user location. (required)
     * @param  string $change_request_id The unique identifier of the change request being requested. This value was originally generated by the createChangeRequest call, and is returned by the getChangeRequests call in the changeRequests.changeRequestId field. (required)
     * @param  string $accept_language Use this header to specify the natural language in which the authenticated user desires the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChangeRequestAsyncWithHttpInfo($x_ebay_c_marketplace_id, $change_request_id, $accept_language = null)
    {
        $returnType = '\Nopolabs\EBay\Commerce\Catalog\Model\ChangeRequest';
        $request = $this->getChangeRequestRequest($x_ebay_c_marketplace_id, $change_request_id, $accept_language);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getChangeRequest'
     *
     * @param  string $x_ebay_c_marketplace_id Use this header to identify the authenticated user&#39;s business context. This header is currently limited to EBAY_US, EBAY_AU, EBAY_CA, and EBAY_GB values. If not included with your request, the marketplace value defaults to EBAY_US. Note that it does not indicate a language preference or end-user location. (required)
     * @param  string $change_request_id The unique identifier of the change request being requested. This value was originally generated by the createChangeRequest call, and is returned by the getChangeRequests call in the changeRequests.changeRequestId field. (required)
     * @param  string $accept_language Use this header to specify the natural language in which the authenticated user desires the response. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getChangeRequestRequest($x_ebay_c_marketplace_id, $change_request_id, $accept_language = null)
    {
        // verify the required parameter 'x_ebay_c_marketplace_id' is set
        if ($x_ebay_c_marketplace_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_ebay_c_marketplace_id when calling getChangeRequest'
            );
        }
        // verify the required parameter 'change_request_id' is set
        if ($change_request_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $change_request_id when calling getChangeRequest'
            );
        }

        $resourcePath = '/change_request/{change_request_id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // header params
        if ($x_ebay_c_marketplace_id !== null) {
            $headerParams['X-EBAY-C-MARKETPLACE-ID'] = ObjectSerializer::toHeaderValue($x_ebay_c_marketplace_id);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }

        // path params
        if ($change_request_id !== null) {
            $resourcePath = str_replace(
                '{' . 'change_request_id' . '}',
                ObjectSerializer::toPathValue($change_request_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getChangeRequests
     *
     * @param  string $x_ebay_c_marketplace_id Use this header to identify the authenticated user&#39;s business context. This header is currently limited to EBAY_US, EBAY_AU, EBAY_CA, and EBAY_GB values. If not included with your request, the marketplace value defaults to EBAY_US. Note that it does not indicate a language preference or end-user location. (required)
     * @param  string $accept_language Use this header to specify the natural language in which the authenticated user desires the response. (optional)
     * @param  string $filter One or more comma-separated criteria for narrowing down the collection of change requests returned by this call. These criteria correspond to specific fields in the response payload. Multiple filter criteria combine to further restrict the results. The available criteria are as follows: creationDate The time period during which qualifying change requests were created (the changeRequests.creationDate field). In the URI, this is expressed as a starting timestamp, with or without an ending timestamp (in brackets). The timestamps are in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. For example: creationDate:[2016-02-21T08:25:43.511Z..] identifies orders created on or after the given timestamp. creationDate:[2016-02-21T08:25:43.511Z..2016-04-21T08:25:43.511Z] identifies orders created between the given timestamps, inclusive. changeRequestStatus The degree to which qualifying change requests have been resolved (the changeRequests.changeRequestStatus field). For example: changeRequestStatus:{SUBMITTED} specifies change requests that have been submitted and are being processed. changeRequestStatus:{UNDER_REVIEW|APPROVED_WITH_MODIFICATIONS} specifies change requests that are being reviewed by eBay, and change requests that have been approved, but eBay has made some modifications such as correcting typographic errors. changeRequestStatus:{REJECTED} specifies change requests that have been rejected by eBay because of a violation. referenceId The identifier of an object of the type specified by the value of the referenceType parameter. For example, if the value of referenceType is INVENTORY_ITEM, this field should contain the seller&#39;s SKU for an inventory item. If you include this without the referenceType parameter, the filter will apply to objects of any reference type with this reference ID, if specified in the change request. This parameter can take multiple values. For example: referenceId:{234242|675756} referenceType The type of object that a requested catalog change is intended to support, if specified in the change request (the changeRequests.referenceType field). For example: referenceType:{INVENTORY_ITEM} indicates that the requested change will support the completion of an inventory item, which you can then use to create an offer. referenceType:{LISTING} indicates that the requested change will support the modification of an active product listing. referenceType:{LISTING_DRAFT} indicates that the requested change will support the completion of an offer, which you can then publish as a product listing. For implementation help, refer to eBay API documentation at https://developer.ebay.com/devzone/rest/api-ref/catalog/types/FilterField.html (optional)
     * @param  string $limit The number of change requests to return. This is the result set, a subset of the full collection of change requests that match the filter criteria of this call. Maximum: 200 Default: 50 (optional)
     * @param  string $offset The first change request to return based on its position in the returned collection of change requests. Use this parameter in conjunction with the limit parameter to control the pagination of the output. For example, if offset is set to 10 and limit is set to 10, the call retrieves change requests 11 thru 20 from the resulting collection of change requests. Note: This feature employs a zero-based list, where the first item in the list has an offset of 0. Default: 0 (zero) (optional)
     *
     * @throws \Nopolabs\EBay\Commerce\Catalog\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Nopolabs\EBay\Commerce\Catalog\Model\GetChangeRequestsResponse
     */
    public function getChangeRequests($x_ebay_c_marketplace_id, $accept_language = null, $filter = null, $limit = null, $offset = null)
    {
        list($response) = $this->getChangeRequestsWithHttpInfo($x_ebay_c_marketplace_id, $accept_language, $filter, $limit, $offset);
        return $response;
    }

    /**
     * Operation getChangeRequestsWithHttpInfo
     *
     * @param  string $x_ebay_c_marketplace_id Use this header to identify the authenticated user&#39;s business context. This header is currently limited to EBAY_US, EBAY_AU, EBAY_CA, and EBAY_GB values. If not included with your request, the marketplace value defaults to EBAY_US. Note that it does not indicate a language preference or end-user location. (required)
     * @param  string $accept_language Use this header to specify the natural language in which the authenticated user desires the response. (optional)
     * @param  string $filter One or more comma-separated criteria for narrowing down the collection of change requests returned by this call. These criteria correspond to specific fields in the response payload. Multiple filter criteria combine to further restrict the results. The available criteria are as follows: creationDate The time period during which qualifying change requests were created (the changeRequests.creationDate field). In the URI, this is expressed as a starting timestamp, with or without an ending timestamp (in brackets). The timestamps are in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. For example: creationDate:[2016-02-21T08:25:43.511Z..] identifies orders created on or after the given timestamp. creationDate:[2016-02-21T08:25:43.511Z..2016-04-21T08:25:43.511Z] identifies orders created between the given timestamps, inclusive. changeRequestStatus The degree to which qualifying change requests have been resolved (the changeRequests.changeRequestStatus field). For example: changeRequestStatus:{SUBMITTED} specifies change requests that have been submitted and are being processed. changeRequestStatus:{UNDER_REVIEW|APPROVED_WITH_MODIFICATIONS} specifies change requests that are being reviewed by eBay, and change requests that have been approved, but eBay has made some modifications such as correcting typographic errors. changeRequestStatus:{REJECTED} specifies change requests that have been rejected by eBay because of a violation. referenceId The identifier of an object of the type specified by the value of the referenceType parameter. For example, if the value of referenceType is INVENTORY_ITEM, this field should contain the seller&#39;s SKU for an inventory item. If you include this without the referenceType parameter, the filter will apply to objects of any reference type with this reference ID, if specified in the change request. This parameter can take multiple values. For example: referenceId:{234242|675756} referenceType The type of object that a requested catalog change is intended to support, if specified in the change request (the changeRequests.referenceType field). For example: referenceType:{INVENTORY_ITEM} indicates that the requested change will support the completion of an inventory item, which you can then use to create an offer. referenceType:{LISTING} indicates that the requested change will support the modification of an active product listing. referenceType:{LISTING_DRAFT} indicates that the requested change will support the completion of an offer, which you can then publish as a product listing. For implementation help, refer to eBay API documentation at https://developer.ebay.com/devzone/rest/api-ref/catalog/types/FilterField.html (optional)
     * @param  string $limit The number of change requests to return. This is the result set, a subset of the full collection of change requests that match the filter criteria of this call. Maximum: 200 Default: 50 (optional)
     * @param  string $offset The first change request to return based on its position in the returned collection of change requests. Use this parameter in conjunction with the limit parameter to control the pagination of the output. For example, if offset is set to 10 and limit is set to 10, the call retrieves change requests 11 thru 20 from the resulting collection of change requests. Note: This feature employs a zero-based list, where the first item in the list has an offset of 0. Default: 0 (zero) (optional)
     *
     * @throws \Nopolabs\EBay\Commerce\Catalog\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Nopolabs\EBay\Commerce\Catalog\Model\GetChangeRequestsResponse, HTTP status code, HTTP response headers (array of strings)
     */
    public function getChangeRequestsWithHttpInfo($x_ebay_c_marketplace_id, $accept_language = null, $filter = null, $limit = null, $offset = null)
    {
        $returnType = '\Nopolabs\EBay\Commerce\Catalog\Model\GetChangeRequestsResponse';
        $request = $this->getChangeRequestsRequest($x_ebay_c_marketplace_id, $accept_language, $filter, $limit, $offset);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nopolabs\EBay\Commerce\Catalog\Model\GetChangeRequestsResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getChangeRequestsAsync
     *
     * 
     *
     * @param  string $x_ebay_c_marketplace_id Use this header to identify the authenticated user&#39;s business context. This header is currently limited to EBAY_US, EBAY_AU, EBAY_CA, and EBAY_GB values. If not included with your request, the marketplace value defaults to EBAY_US. Note that it does not indicate a language preference or end-user location. (required)
     * @param  string $accept_language Use this header to specify the natural language in which the authenticated user desires the response. (optional)
     * @param  string $filter One or more comma-separated criteria for narrowing down the collection of change requests returned by this call. These criteria correspond to specific fields in the response payload. Multiple filter criteria combine to further restrict the results. The available criteria are as follows: creationDate The time period during which qualifying change requests were created (the changeRequests.creationDate field). In the URI, this is expressed as a starting timestamp, with or without an ending timestamp (in brackets). The timestamps are in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. For example: creationDate:[2016-02-21T08:25:43.511Z..] identifies orders created on or after the given timestamp. creationDate:[2016-02-21T08:25:43.511Z..2016-04-21T08:25:43.511Z] identifies orders created between the given timestamps, inclusive. changeRequestStatus The degree to which qualifying change requests have been resolved (the changeRequests.changeRequestStatus field). For example: changeRequestStatus:{SUBMITTED} specifies change requests that have been submitted and are being processed. changeRequestStatus:{UNDER_REVIEW|APPROVED_WITH_MODIFICATIONS} specifies change requests that are being reviewed by eBay, and change requests that have been approved, but eBay has made some modifications such as correcting typographic errors. changeRequestStatus:{REJECTED} specifies change requests that have been rejected by eBay because of a violation. referenceId The identifier of an object of the type specified by the value of the referenceType parameter. For example, if the value of referenceType is INVENTORY_ITEM, this field should contain the seller&#39;s SKU for an inventory item. If you include this without the referenceType parameter, the filter will apply to objects of any reference type with this reference ID, if specified in the change request. This parameter can take multiple values. For example: referenceId:{234242|675756} referenceType The type of object that a requested catalog change is intended to support, if specified in the change request (the changeRequests.referenceType field). For example: referenceType:{INVENTORY_ITEM} indicates that the requested change will support the completion of an inventory item, which you can then use to create an offer. referenceType:{LISTING} indicates that the requested change will support the modification of an active product listing. referenceType:{LISTING_DRAFT} indicates that the requested change will support the completion of an offer, which you can then publish as a product listing. For implementation help, refer to eBay API documentation at https://developer.ebay.com/devzone/rest/api-ref/catalog/types/FilterField.html (optional)
     * @param  string $limit The number of change requests to return. This is the result set, a subset of the full collection of change requests that match the filter criteria of this call. Maximum: 200 Default: 50 (optional)
     * @param  string $offset The first change request to return based on its position in the returned collection of change requests. Use this parameter in conjunction with the limit parameter to control the pagination of the output. For example, if offset is set to 10 and limit is set to 10, the call retrieves change requests 11 thru 20 from the resulting collection of change requests. Note: This feature employs a zero-based list, where the first item in the list has an offset of 0. Default: 0 (zero) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChangeRequestsAsync($x_ebay_c_marketplace_id, $accept_language = null, $filter = null, $limit = null, $offset = null)
    {
        return $this->getChangeRequestsAsyncWithHttpInfo($x_ebay_c_marketplace_id, $accept_language, $filter, $limit, $offset)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getChangeRequestsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $x_ebay_c_marketplace_id Use this header to identify the authenticated user&#39;s business context. This header is currently limited to EBAY_US, EBAY_AU, EBAY_CA, and EBAY_GB values. If not included with your request, the marketplace value defaults to EBAY_US. Note that it does not indicate a language preference or end-user location. (required)
     * @param  string $accept_language Use this header to specify the natural language in which the authenticated user desires the response. (optional)
     * @param  string $filter One or more comma-separated criteria for narrowing down the collection of change requests returned by this call. These criteria correspond to specific fields in the response payload. Multiple filter criteria combine to further restrict the results. The available criteria are as follows: creationDate The time period during which qualifying change requests were created (the changeRequests.creationDate field). In the URI, this is expressed as a starting timestamp, with or without an ending timestamp (in brackets). The timestamps are in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. For example: creationDate:[2016-02-21T08:25:43.511Z..] identifies orders created on or after the given timestamp. creationDate:[2016-02-21T08:25:43.511Z..2016-04-21T08:25:43.511Z] identifies orders created between the given timestamps, inclusive. changeRequestStatus The degree to which qualifying change requests have been resolved (the changeRequests.changeRequestStatus field). For example: changeRequestStatus:{SUBMITTED} specifies change requests that have been submitted and are being processed. changeRequestStatus:{UNDER_REVIEW|APPROVED_WITH_MODIFICATIONS} specifies change requests that are being reviewed by eBay, and change requests that have been approved, but eBay has made some modifications such as correcting typographic errors. changeRequestStatus:{REJECTED} specifies change requests that have been rejected by eBay because of a violation. referenceId The identifier of an object of the type specified by the value of the referenceType parameter. For example, if the value of referenceType is INVENTORY_ITEM, this field should contain the seller&#39;s SKU for an inventory item. If you include this without the referenceType parameter, the filter will apply to objects of any reference type with this reference ID, if specified in the change request. This parameter can take multiple values. For example: referenceId:{234242|675756} referenceType The type of object that a requested catalog change is intended to support, if specified in the change request (the changeRequests.referenceType field). For example: referenceType:{INVENTORY_ITEM} indicates that the requested change will support the completion of an inventory item, which you can then use to create an offer. referenceType:{LISTING} indicates that the requested change will support the modification of an active product listing. referenceType:{LISTING_DRAFT} indicates that the requested change will support the completion of an offer, which you can then publish as a product listing. For implementation help, refer to eBay API documentation at https://developer.ebay.com/devzone/rest/api-ref/catalog/types/FilterField.html (optional)
     * @param  string $limit The number of change requests to return. This is the result set, a subset of the full collection of change requests that match the filter criteria of this call. Maximum: 200 Default: 50 (optional)
     * @param  string $offset The first change request to return based on its position in the returned collection of change requests. Use this parameter in conjunction with the limit parameter to control the pagination of the output. For example, if offset is set to 10 and limit is set to 10, the call retrieves change requests 11 thru 20 from the resulting collection of change requests. Note: This feature employs a zero-based list, where the first item in the list has an offset of 0. Default: 0 (zero) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getChangeRequestsAsyncWithHttpInfo($x_ebay_c_marketplace_id, $accept_language = null, $filter = null, $limit = null, $offset = null)
    {
        $returnType = '\Nopolabs\EBay\Commerce\Catalog\Model\GetChangeRequestsResponse';
        $request = $this->getChangeRequestsRequest($x_ebay_c_marketplace_id, $accept_language, $filter, $limit, $offset);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getChangeRequests'
     *
     * @param  string $x_ebay_c_marketplace_id Use this header to identify the authenticated user&#39;s business context. This header is currently limited to EBAY_US, EBAY_AU, EBAY_CA, and EBAY_GB values. If not included with your request, the marketplace value defaults to EBAY_US. Note that it does not indicate a language preference or end-user location. (required)
     * @param  string $accept_language Use this header to specify the natural language in which the authenticated user desires the response. (optional)
     * @param  string $filter One or more comma-separated criteria for narrowing down the collection of change requests returned by this call. These criteria correspond to specific fields in the response payload. Multiple filter criteria combine to further restrict the results. The available criteria are as follows: creationDate The time period during which qualifying change requests were created (the changeRequests.creationDate field). In the URI, this is expressed as a starting timestamp, with or without an ending timestamp (in brackets). The timestamps are in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. For example: creationDate:[2016-02-21T08:25:43.511Z..] identifies orders created on or after the given timestamp. creationDate:[2016-02-21T08:25:43.511Z..2016-04-21T08:25:43.511Z] identifies orders created between the given timestamps, inclusive. changeRequestStatus The degree to which qualifying change requests have been resolved (the changeRequests.changeRequestStatus field). For example: changeRequestStatus:{SUBMITTED} specifies change requests that have been submitted and are being processed. changeRequestStatus:{UNDER_REVIEW|APPROVED_WITH_MODIFICATIONS} specifies change requests that are being reviewed by eBay, and change requests that have been approved, but eBay has made some modifications such as correcting typographic errors. changeRequestStatus:{REJECTED} specifies change requests that have been rejected by eBay because of a violation. referenceId The identifier of an object of the type specified by the value of the referenceType parameter. For example, if the value of referenceType is INVENTORY_ITEM, this field should contain the seller&#39;s SKU for an inventory item. If you include this without the referenceType parameter, the filter will apply to objects of any reference type with this reference ID, if specified in the change request. This parameter can take multiple values. For example: referenceId:{234242|675756} referenceType The type of object that a requested catalog change is intended to support, if specified in the change request (the changeRequests.referenceType field). For example: referenceType:{INVENTORY_ITEM} indicates that the requested change will support the completion of an inventory item, which you can then use to create an offer. referenceType:{LISTING} indicates that the requested change will support the modification of an active product listing. referenceType:{LISTING_DRAFT} indicates that the requested change will support the completion of an offer, which you can then publish as a product listing. For implementation help, refer to eBay API documentation at https://developer.ebay.com/devzone/rest/api-ref/catalog/types/FilterField.html (optional)
     * @param  string $limit The number of change requests to return. This is the result set, a subset of the full collection of change requests that match the filter criteria of this call. Maximum: 200 Default: 50 (optional)
     * @param  string $offset The first change request to return based on its position in the returned collection of change requests. Use this parameter in conjunction with the limit parameter to control the pagination of the output. For example, if offset is set to 10 and limit is set to 10, the call retrieves change requests 11 thru 20 from the resulting collection of change requests. Note: This feature employs a zero-based list, where the first item in the list has an offset of 0. Default: 0 (zero) (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getChangeRequestsRequest($x_ebay_c_marketplace_id, $accept_language = null, $filter = null, $limit = null, $offset = null)
    {
        // verify the required parameter 'x_ebay_c_marketplace_id' is set
        if ($x_ebay_c_marketplace_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_ebay_c_marketplace_id when calling getChangeRequests'
            );
        }

        $resourcePath = '/change_request';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($filter !== null) {
            $queryParams['filter'] = ObjectSerializer::toQueryValue($filter);
        }
        // query params
        if ($limit !== null) {
            $queryParams['limit'] = ObjectSerializer::toQueryValue($limit);
        }
        // query params
        if ($offset !== null) {
            $queryParams['offset'] = ObjectSerializer::toQueryValue($offset);
        }
        // header params
        if ($x_ebay_c_marketplace_id !== null) {
            $headerParams['X-EBAY-C-MARKETPLACE-ID'] = ObjectSerializer::toHeaderValue($x_ebay_c_marketplace_id);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
