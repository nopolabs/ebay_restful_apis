<?php
/**
 * ProductMetadataApi
 * PHP version 5
 *
 * @category Class
 * @package  Nopolabs\EBay\Commerce\Catalog
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Catalog API
 *
 * Use the Catalog API to search the eBay catalog for products on which to base a seller's item listing; to retrieve a product record by its eBay product identifier (ePID); to submit a catalog change request to modify an existing product or create a new product; and to manage catalog change requests.
 *
 * OpenAPI spec version: 1.0.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Nopolabs\EBay\Commerce\Catalog\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Nopolabs\EBay\Commerce\Catalog\ApiException;
use Nopolabs\EBay\Commerce\Catalog\Configuration;
use Nopolabs\EBay\Commerce\Catalog\HeaderSelector;
use Nopolabs\EBay\Commerce\Catalog\ObjectSerializer;

/**
 * ProductMetadataApi Class Doc Comment
 *
 * @category Class
 * @package  Nopolabs\EBay\Commerce\Catalog
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ProductMetadataApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getProductMetadata
     *
     * @param  string $epid The unique eBay product identifier of the catalog product that you want to update. The supported and applied aspects, constraints, and values for this eBay catalog product are returned. (required)
     * @param  string $x_ebay_c_marketplace_id Use this header to specify the eBay marketplace identifier. Supported values for this header can be found in the MarketplaceIdEnum type definition. (required)
     * @param  string $accept_language This request header sets the natural language that will be provided in the field values of the response payload. Supported values for this header can be found in the Marketplace ID and language header values table. (optional)
     * @param  string $other_applicable_category_ids Use only if you are also including the primary_category_id parameter in the request. Provide one or more comma-separated category IDs in this parameter. Sellers can use other_applicable_category_ids to retrieve information about the specified categories&#39; associated aspects, constraints, and values, along with the same information for the category specified in the primary_category_id parameter, for the seller to assess, select, and populate for submission with the createChangeRequest call. eBay category IDs are returned by the Taxonomy API&#39;s category_tree calls. (optional)
     * @param  string $primary_category_id Use only if the seller believes this product is associated with the wrong primary category. Use this parameter to submit the unique identifier of the primary category that the seller wants to use instead. This call retrieves information about the specified category&#39;s associated aspects, constraints, and values for the seller to assess, select, and populate for submission with the Catalog API&#39;s createChangeRequest call. If you exclude this parameter from your request, this call retrieves information about the aspects, constraints, and values of the specified product&#39;s current primary category and other applicable categories. If you include this parameter in your request, this call does not return any information about the specified product&#39;s current primary or other applicable categories, but only about the specified category. To retrieve information about any other categories, you must specify them with the other_applicable_category_ids parameter. eBay category IDs are returned by the Taxonomy API&#39;s category_tree calls. (optional)
     *
     * @throws \Nopolabs\EBay\Commerce\Catalog\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Nopolabs\EBay\Commerce\Catalog\Model\ProductMetadata
     */
    public function getProductMetadata($epid, $x_ebay_c_marketplace_id, $accept_language = null, $other_applicable_category_ids = null, $primary_category_id = null)
    {
        list($response) = $this->getProductMetadataWithHttpInfo($epid, $x_ebay_c_marketplace_id, $accept_language, $other_applicable_category_ids, $primary_category_id);
        return $response;
    }

    /**
     * Operation getProductMetadataWithHttpInfo
     *
     * @param  string $epid The unique eBay product identifier of the catalog product that you want to update. The supported and applied aspects, constraints, and values for this eBay catalog product are returned. (required)
     * @param  string $x_ebay_c_marketplace_id Use this header to specify the eBay marketplace identifier. Supported values for this header can be found in the MarketplaceIdEnum type definition. (required)
     * @param  string $accept_language This request header sets the natural language that will be provided in the field values of the response payload. Supported values for this header can be found in the Marketplace ID and language header values table. (optional)
     * @param  string $other_applicable_category_ids Use only if you are also including the primary_category_id parameter in the request. Provide one or more comma-separated category IDs in this parameter. Sellers can use other_applicable_category_ids to retrieve information about the specified categories&#39; associated aspects, constraints, and values, along with the same information for the category specified in the primary_category_id parameter, for the seller to assess, select, and populate for submission with the createChangeRequest call. eBay category IDs are returned by the Taxonomy API&#39;s category_tree calls. (optional)
     * @param  string $primary_category_id Use only if the seller believes this product is associated with the wrong primary category. Use this parameter to submit the unique identifier of the primary category that the seller wants to use instead. This call retrieves information about the specified category&#39;s associated aspects, constraints, and values for the seller to assess, select, and populate for submission with the Catalog API&#39;s createChangeRequest call. If you exclude this parameter from your request, this call retrieves information about the aspects, constraints, and values of the specified product&#39;s current primary category and other applicable categories. If you include this parameter in your request, this call does not return any information about the specified product&#39;s current primary or other applicable categories, but only about the specified category. To retrieve information about any other categories, you must specify them with the other_applicable_category_ids parameter. eBay category IDs are returned by the Taxonomy API&#39;s category_tree calls. (optional)
     *
     * @throws \Nopolabs\EBay\Commerce\Catalog\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Nopolabs\EBay\Commerce\Catalog\Model\ProductMetadata, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductMetadataWithHttpInfo($epid, $x_ebay_c_marketplace_id, $accept_language = null, $other_applicable_category_ids = null, $primary_category_id = null)
    {
        $returnType = '\Nopolabs\EBay\Commerce\Catalog\Model\ProductMetadata';
        $request = $this->getProductMetadataRequest($epid, $x_ebay_c_marketplace_id, $accept_language, $other_applicable_category_ids, $primary_category_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nopolabs\EBay\Commerce\Catalog\Model\ProductMetadata',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProductMetadataAsync
     *
     * 
     *
     * @param  string $epid The unique eBay product identifier of the catalog product that you want to update. The supported and applied aspects, constraints, and values for this eBay catalog product are returned. (required)
     * @param  string $x_ebay_c_marketplace_id Use this header to specify the eBay marketplace identifier. Supported values for this header can be found in the MarketplaceIdEnum type definition. (required)
     * @param  string $accept_language This request header sets the natural language that will be provided in the field values of the response payload. Supported values for this header can be found in the Marketplace ID and language header values table. (optional)
     * @param  string $other_applicable_category_ids Use only if you are also including the primary_category_id parameter in the request. Provide one or more comma-separated category IDs in this parameter. Sellers can use other_applicable_category_ids to retrieve information about the specified categories&#39; associated aspects, constraints, and values, along with the same information for the category specified in the primary_category_id parameter, for the seller to assess, select, and populate for submission with the createChangeRequest call. eBay category IDs are returned by the Taxonomy API&#39;s category_tree calls. (optional)
     * @param  string $primary_category_id Use only if the seller believes this product is associated with the wrong primary category. Use this parameter to submit the unique identifier of the primary category that the seller wants to use instead. This call retrieves information about the specified category&#39;s associated aspects, constraints, and values for the seller to assess, select, and populate for submission with the Catalog API&#39;s createChangeRequest call. If you exclude this parameter from your request, this call retrieves information about the aspects, constraints, and values of the specified product&#39;s current primary category and other applicable categories. If you include this parameter in your request, this call does not return any information about the specified product&#39;s current primary or other applicable categories, but only about the specified category. To retrieve information about any other categories, you must specify them with the other_applicable_category_ids parameter. eBay category IDs are returned by the Taxonomy API&#39;s category_tree calls. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductMetadataAsync($epid, $x_ebay_c_marketplace_id, $accept_language = null, $other_applicable_category_ids = null, $primary_category_id = null)
    {
        return $this->getProductMetadataAsyncWithHttpInfo($epid, $x_ebay_c_marketplace_id, $accept_language, $other_applicable_category_ids, $primary_category_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProductMetadataAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $epid The unique eBay product identifier of the catalog product that you want to update. The supported and applied aspects, constraints, and values for this eBay catalog product are returned. (required)
     * @param  string $x_ebay_c_marketplace_id Use this header to specify the eBay marketplace identifier. Supported values for this header can be found in the MarketplaceIdEnum type definition. (required)
     * @param  string $accept_language This request header sets the natural language that will be provided in the field values of the response payload. Supported values for this header can be found in the Marketplace ID and language header values table. (optional)
     * @param  string $other_applicable_category_ids Use only if you are also including the primary_category_id parameter in the request. Provide one or more comma-separated category IDs in this parameter. Sellers can use other_applicable_category_ids to retrieve information about the specified categories&#39; associated aspects, constraints, and values, along with the same information for the category specified in the primary_category_id parameter, for the seller to assess, select, and populate for submission with the createChangeRequest call. eBay category IDs are returned by the Taxonomy API&#39;s category_tree calls. (optional)
     * @param  string $primary_category_id Use only if the seller believes this product is associated with the wrong primary category. Use this parameter to submit the unique identifier of the primary category that the seller wants to use instead. This call retrieves information about the specified category&#39;s associated aspects, constraints, and values for the seller to assess, select, and populate for submission with the Catalog API&#39;s createChangeRequest call. If you exclude this parameter from your request, this call retrieves information about the aspects, constraints, and values of the specified product&#39;s current primary category and other applicable categories. If you include this parameter in your request, this call does not return any information about the specified product&#39;s current primary or other applicable categories, but only about the specified category. To retrieve information about any other categories, you must specify them with the other_applicable_category_ids parameter. eBay category IDs are returned by the Taxonomy API&#39;s category_tree calls. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductMetadataAsyncWithHttpInfo($epid, $x_ebay_c_marketplace_id, $accept_language = null, $other_applicable_category_ids = null, $primary_category_id = null)
    {
        $returnType = '\Nopolabs\EBay\Commerce\Catalog\Model\ProductMetadata';
        $request = $this->getProductMetadataRequest($epid, $x_ebay_c_marketplace_id, $accept_language, $other_applicable_category_ids, $primary_category_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProductMetadata'
     *
     * @param  string $epid The unique eBay product identifier of the catalog product that you want to update. The supported and applied aspects, constraints, and values for this eBay catalog product are returned. (required)
     * @param  string $x_ebay_c_marketplace_id Use this header to specify the eBay marketplace identifier. Supported values for this header can be found in the MarketplaceIdEnum type definition. (required)
     * @param  string $accept_language This request header sets the natural language that will be provided in the field values of the response payload. Supported values for this header can be found in the Marketplace ID and language header values table. (optional)
     * @param  string $other_applicable_category_ids Use only if you are also including the primary_category_id parameter in the request. Provide one or more comma-separated category IDs in this parameter. Sellers can use other_applicable_category_ids to retrieve information about the specified categories&#39; associated aspects, constraints, and values, along with the same information for the category specified in the primary_category_id parameter, for the seller to assess, select, and populate for submission with the createChangeRequest call. eBay category IDs are returned by the Taxonomy API&#39;s category_tree calls. (optional)
     * @param  string $primary_category_id Use only if the seller believes this product is associated with the wrong primary category. Use this parameter to submit the unique identifier of the primary category that the seller wants to use instead. This call retrieves information about the specified category&#39;s associated aspects, constraints, and values for the seller to assess, select, and populate for submission with the Catalog API&#39;s createChangeRequest call. If you exclude this parameter from your request, this call retrieves information about the aspects, constraints, and values of the specified product&#39;s current primary category and other applicable categories. If you include this parameter in your request, this call does not return any information about the specified product&#39;s current primary or other applicable categories, but only about the specified category. To retrieve information about any other categories, you must specify them with the other_applicable_category_ids parameter. eBay category IDs are returned by the Taxonomy API&#39;s category_tree calls. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProductMetadataRequest($epid, $x_ebay_c_marketplace_id, $accept_language = null, $other_applicable_category_ids = null, $primary_category_id = null)
    {
        // verify the required parameter 'epid' is set
        if ($epid === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $epid when calling getProductMetadata'
            );
        }
        // verify the required parameter 'x_ebay_c_marketplace_id' is set
        if ($x_ebay_c_marketplace_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_ebay_c_marketplace_id when calling getProductMetadata'
            );
        }

        $resourcePath = '/get_product_metadata';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($epid !== null) {
            $queryParams['epid'] = ObjectSerializer::toQueryValue($epid);
        }
        // query params
        if ($other_applicable_category_ids !== null) {
            $queryParams['other_applicable_category_ids'] = ObjectSerializer::toQueryValue($other_applicable_category_ids);
        }
        // query params
        if ($primary_category_id !== null) {
            $queryParams['primary_category_id'] = ObjectSerializer::toQueryValue($primary_category_id);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($x_ebay_c_marketplace_id !== null) {
            $headerParams['X-EBAY-C-MARKETPLACE-ID'] = ObjectSerializer::toHeaderValue($x_ebay_c_marketplace_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getProductMetadataForCategories
     *
     * @param  string $primary_category_id The unique identifier of the primary eBay category for which you will retrieve product aspects. eBay category IDs are returned by the Taxonomy API&#39;s category_tree calls. (required)
     * @param  string $x_ebay_c_marketplace_id Use this header to specify the eBay marketplace identifier. Supported values for this header can be found under Supported marketplaces on the Catalog API Overview page. (required)
     * @param  string $accept_language This request header sets the natural language that will be provided in the field values of the response payload. Supported values for this header can be found in the Marketplace ID and language header values table. (optional)
     * @param  string $other_applicable_category_ids A string of comma-separated category IDs. if sellers want to specify more than the primary category under which to offer a product, they can use this parameter to retrieve the aspects associated with all of the additional specified categories. eBay category IDs are returned by the Taxonomy API&#39;s category_tree calls. (optional)
     *
     * @throws \Nopolabs\EBay\Commerce\Catalog\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Nopolabs\EBay\Commerce\Catalog\Model\ProductMetadataForCategories
     */
    public function getProductMetadataForCategories($primary_category_id, $x_ebay_c_marketplace_id, $accept_language = null, $other_applicable_category_ids = null)
    {
        list($response) = $this->getProductMetadataForCategoriesWithHttpInfo($primary_category_id, $x_ebay_c_marketplace_id, $accept_language, $other_applicable_category_ids);
        return $response;
    }

    /**
     * Operation getProductMetadataForCategoriesWithHttpInfo
     *
     * @param  string $primary_category_id The unique identifier of the primary eBay category for which you will retrieve product aspects. eBay category IDs are returned by the Taxonomy API&#39;s category_tree calls. (required)
     * @param  string $x_ebay_c_marketplace_id Use this header to specify the eBay marketplace identifier. Supported values for this header can be found under Supported marketplaces on the Catalog API Overview page. (required)
     * @param  string $accept_language This request header sets the natural language that will be provided in the field values of the response payload. Supported values for this header can be found in the Marketplace ID and language header values table. (optional)
     * @param  string $other_applicable_category_ids A string of comma-separated category IDs. if sellers want to specify more than the primary category under which to offer a product, they can use this parameter to retrieve the aspects associated with all of the additional specified categories. eBay category IDs are returned by the Taxonomy API&#39;s category_tree calls. (optional)
     *
     * @throws \Nopolabs\EBay\Commerce\Catalog\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Nopolabs\EBay\Commerce\Catalog\Model\ProductMetadataForCategories, HTTP status code, HTTP response headers (array of strings)
     */
    public function getProductMetadataForCategoriesWithHttpInfo($primary_category_id, $x_ebay_c_marketplace_id, $accept_language = null, $other_applicable_category_ids = null)
    {
        $returnType = '\Nopolabs\EBay\Commerce\Catalog\Model\ProductMetadataForCategories';
        $request = $this->getProductMetadataForCategoriesRequest($primary_category_id, $x_ebay_c_marketplace_id, $accept_language, $other_applicable_category_ids);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Nopolabs\EBay\Commerce\Catalog\Model\ProductMetadataForCategories',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getProductMetadataForCategoriesAsync
     *
     * 
     *
     * @param  string $primary_category_id The unique identifier of the primary eBay category for which you will retrieve product aspects. eBay category IDs are returned by the Taxonomy API&#39;s category_tree calls. (required)
     * @param  string $x_ebay_c_marketplace_id Use this header to specify the eBay marketplace identifier. Supported values for this header can be found under Supported marketplaces on the Catalog API Overview page. (required)
     * @param  string $accept_language This request header sets the natural language that will be provided in the field values of the response payload. Supported values for this header can be found in the Marketplace ID and language header values table. (optional)
     * @param  string $other_applicable_category_ids A string of comma-separated category IDs. if sellers want to specify more than the primary category under which to offer a product, they can use this parameter to retrieve the aspects associated with all of the additional specified categories. eBay category IDs are returned by the Taxonomy API&#39;s category_tree calls. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductMetadataForCategoriesAsync($primary_category_id, $x_ebay_c_marketplace_id, $accept_language = null, $other_applicable_category_ids = null)
    {
        return $this->getProductMetadataForCategoriesAsyncWithHttpInfo($primary_category_id, $x_ebay_c_marketplace_id, $accept_language, $other_applicable_category_ids)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getProductMetadataForCategoriesAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $primary_category_id The unique identifier of the primary eBay category for which you will retrieve product aspects. eBay category IDs are returned by the Taxonomy API&#39;s category_tree calls. (required)
     * @param  string $x_ebay_c_marketplace_id Use this header to specify the eBay marketplace identifier. Supported values for this header can be found under Supported marketplaces on the Catalog API Overview page. (required)
     * @param  string $accept_language This request header sets the natural language that will be provided in the field values of the response payload. Supported values for this header can be found in the Marketplace ID and language header values table. (optional)
     * @param  string $other_applicable_category_ids A string of comma-separated category IDs. if sellers want to specify more than the primary category under which to offer a product, they can use this parameter to retrieve the aspects associated with all of the additional specified categories. eBay category IDs are returned by the Taxonomy API&#39;s category_tree calls. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getProductMetadataForCategoriesAsyncWithHttpInfo($primary_category_id, $x_ebay_c_marketplace_id, $accept_language = null, $other_applicable_category_ids = null)
    {
        $returnType = '\Nopolabs\EBay\Commerce\Catalog\Model\ProductMetadataForCategories';
        $request = $this->getProductMetadataForCategoriesRequest($primary_category_id, $x_ebay_c_marketplace_id, $accept_language, $other_applicable_category_ids);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getProductMetadataForCategories'
     *
     * @param  string $primary_category_id The unique identifier of the primary eBay category for which you will retrieve product aspects. eBay category IDs are returned by the Taxonomy API&#39;s category_tree calls. (required)
     * @param  string $x_ebay_c_marketplace_id Use this header to specify the eBay marketplace identifier. Supported values for this header can be found under Supported marketplaces on the Catalog API Overview page. (required)
     * @param  string $accept_language This request header sets the natural language that will be provided in the field values of the response payload. Supported values for this header can be found in the Marketplace ID and language header values table. (optional)
     * @param  string $other_applicable_category_ids A string of comma-separated category IDs. if sellers want to specify more than the primary category under which to offer a product, they can use this parameter to retrieve the aspects associated with all of the additional specified categories. eBay category IDs are returned by the Taxonomy API&#39;s category_tree calls. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getProductMetadataForCategoriesRequest($primary_category_id, $x_ebay_c_marketplace_id, $accept_language = null, $other_applicable_category_ids = null)
    {
        // verify the required parameter 'primary_category_id' is set
        if ($primary_category_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $primary_category_id when calling getProductMetadataForCategories'
            );
        }
        // verify the required parameter 'x_ebay_c_marketplace_id' is set
        if ($x_ebay_c_marketplace_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_ebay_c_marketplace_id when calling getProductMetadataForCategories'
            );
        }

        $resourcePath = '/get_product_metadata_for_categories';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($other_applicable_category_ids !== null) {
            $queryParams['other_applicable_category_ids'] = ObjectSerializer::toQueryValue($other_applicable_category_ids);
        }
        // query params
        if ($primary_category_id !== null) {
            $queryParams['primary_category_id'] = ObjectSerializer::toQueryValue($primary_category_id);
        }
        // header params
        if ($accept_language !== null) {
            $headerParams['Accept-Language'] = ObjectSerializer::toHeaderValue($accept_language);
        }
        // header params
        if ($x_ebay_c_marketplace_id !== null) {
            $headerParams['X-EBAY-C-MARKETPLACE-ID'] = ObjectSerializer::toHeaderValue($x_ebay_c_marketplace_id);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
