<?php
/**
 * PaymentHold
 *
 * PHP version 5
 *
 * @category Class
 * @package  Nopolabs\EBay\Sell\Fulfillment
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Fulfillment API
 *
 * Use the Fulfillment API to complete the process of packaging, addressing, handling, and shipping each order on behalf of the seller, in accordance with the payment method and timing specified at checkout.
 *
 * OpenAPI spec version: v1.6.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Nopolabs\EBay\Sell\Fulfillment\Model;

use \ArrayAccess;
use \Nopolabs\EBay\Sell\Fulfillment\ObjectSerializer;

/**
 * PaymentHold Class Doc Comment
 *
 * @category Class
 * @description This type contains information about a hold placed on a payment to a seller for an order, including the reason why the buyer&#39;s payment for the order is being held, the expected release date of the funds into the seller&#39;s account, the current state of the hold, and the actual release date if the payment has been released, and possible actions the seller can take to expedite the payout of funds into their account.
 * @package  Nopolabs\EBay\Sell\Fulfillment
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PaymentHold implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PaymentHold';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'expected_release_date' => 'string',
        'hold_amount' => '\Nopolabs\EBay\Sell\Fulfillment\Model\Amount',
        'hold_reason' => 'string',
        'hold_state' => 'string',
        'release_date' => 'string',
        'seller_actions_to_release' => '\Nopolabs\EBay\Sell\Fulfillment\Model\SellerActionsToRelease[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'expected_release_date' => null,
        'hold_amount' => null,
        'hold_reason' => null,
        'hold_state' => null,
        'release_date' => null,
        'seller_actions_to_release' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'expected_release_date' => 'expectedReleaseDate',
        'hold_amount' => 'holdAmount',
        'hold_reason' => 'holdReason',
        'hold_state' => 'holdState',
        'release_date' => 'releaseDate',
        'seller_actions_to_release' => 'sellerActionsToRelease'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'expected_release_date' => 'setExpectedReleaseDate',
        'hold_amount' => 'setHoldAmount',
        'hold_reason' => 'setHoldReason',
        'hold_state' => 'setHoldState',
        'release_date' => 'setReleaseDate',
        'seller_actions_to_release' => 'setSellerActionsToRelease'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'expected_release_date' => 'getExpectedReleaseDate',
        'hold_amount' => 'getHoldAmount',
        'hold_reason' => 'getHoldReason',
        'hold_state' => 'getHoldState',
        'release_date' => 'getReleaseDate',
        'seller_actions_to_release' => 'getSellerActionsToRelease'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['expected_release_date'] = isset($data['expected_release_date']) ? $data['expected_release_date'] : null;
        $this->container['hold_amount'] = isset($data['hold_amount']) ? $data['hold_amount'] : null;
        $this->container['hold_reason'] = isset($data['hold_reason']) ? $data['hold_reason'] : null;
        $this->container['hold_state'] = isset($data['hold_state']) ? $data['hold_state'] : null;
        $this->container['release_date'] = isset($data['release_date']) ? $data['release_date'] : null;
        $this->container['seller_actions_to_release'] = isset($data['seller_actions_to_release']) ? $data['seller_actions_to_release'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets expected_release_date
     *
     * @return string
     */
    public function getExpectedReleaseDate()
    {
        return $this->container['expected_release_date'];
    }

    /**
     * Sets expected_release_date
     *
     * @param string $expected_release_date The date and time that the payment being held is expected to be released to the seller. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. This field will be returned if known by eBay. Format: YYYY-MM-DDTHH:MM:SS.SSSZ Example: 2015-08-04T19:09:02.768Z
     *
     * @return $this
     */
    public function setExpectedReleaseDate($expected_release_date)
    {
        $this->container['expected_release_date'] = $expected_release_date;

        return $this;
    }

    /**
     * Gets hold_amount
     *
     * @return \Nopolabs\EBay\Sell\Fulfillment\Model\Amount
     */
    public function getHoldAmount()
    {
        return $this->container['hold_amount'];
    }

    /**
     * Sets hold_amount
     *
     * @param \Nopolabs\EBay\Sell\Fulfillment\Model\Amount $hold_amount hold_amount
     *
     * @return $this
     */
    public function setHoldAmount($hold_amount)
    {
        $this->container['hold_amount'] = $hold_amount;

        return $this;
    }

    /**
     * Gets hold_reason
     *
     * @return string
     */
    public function getHoldReason()
    {
        return $this->container['hold_reason'];
    }

    /**
     * Sets hold_reason
     *
     * @param string $hold_reason The reason that the payment is being held. A seller's payment may be helf for a number of reasons, including when the seller is new, the seller's level is below standard, or if a return case or 'Significantly not as described' case is pending against the seller. This field is always returned with the paymentHolds array.
     *
     * @return $this
     */
    public function setHoldReason($hold_reason)
    {
        $this->container['hold_reason'] = $hold_reason;

        return $this;
    }

    /**
     * Gets hold_state
     *
     * @return string
     */
    public function getHoldState()
    {
        return $this->container['hold_state'];
    }

    /**
     * Sets hold_state
     *
     * @param string $hold_state The current stage or condition of the hold. This field is always returned with the paymentHolds array. Applicable values: HELD HELD_PENDING NOT_HELD RELEASE_CONFIRMED RELEASE_FAILED RELEASE_PENDING RELEASED
     *
     * @return $this
     */
    public function setHoldState($hold_state)
    {
        $this->container['hold_state'] = $hold_state;

        return $this;
    }

    /**
     * Gets release_date
     *
     * @return string
     */
    public function getReleaseDate()
    {
        return $this->container['release_date'];
    }

    /**
     * Sets release_date
     *
     * @param string $release_date The date and time that the payment being held was actually released to the seller. This timestamp is in ISO 8601 format, which uses the 24-hour Universal Coordinated Time (UTC) clock. This field is not returned until the seller's payment is actually released into the seller's account. Format: YYYY-MM-DDTHH:MM:SS.SSSZ Example: 2015-08-04T19:09:02.768Z
     *
     * @return $this
     */
    public function setReleaseDate($release_date)
    {
        $this->container['release_date'] = $release_date;

        return $this;
    }

    /**
     * Gets seller_actions_to_release
     *
     * @return \Nopolabs\EBay\Sell\Fulfillment\Model\SellerActionsToRelease[]
     */
    public function getSellerActionsToRelease()
    {
        return $this->container['seller_actions_to_release'];
    }

    /**
     * Sets seller_actions_to_release
     *
     * @param \Nopolabs\EBay\Sell\Fulfillment\Model\SellerActionsToRelease[] $seller_actions_to_release A list of one or more possible actions that the seller can take to release the hold on the payment.
     *
     * @return $this
     */
    public function setSellerActionsToRelease($seller_actions_to_release)
    {
        $this->container['seller_actions_to_release'] = $seller_actions_to_release;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


