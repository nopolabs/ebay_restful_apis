<?php
/**
 * ValueConstraint
 *
 * PHP version 5
 *
 * @category Class
 * @package  Nopolabs\EBay\Commerce\Taxonomy
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Commerce Taxonomy Api
 *
 * Use the Taxonomy API to discover the most appropriate eBay categories under which sellers can offer inventory items for sale, and the most likely categories under which buyers can browse or search for items to purchase. In addition, the Taxonomy API provides information about the required and recommended category aspects to include in listings.
 *
 * OpenAPI spec version: v1_beta.2.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Nopolabs\EBay\Commerce\Taxonomy\Model;

use \ArrayAccess;
use \Nopolabs\EBay\Commerce\Taxonomy\ObjectSerializer;

/**
 * ValueConstraint Class Doc Comment
 *
 * @category Class
 * @description This type contains a list of the dependencies that identify when a particular value is available for a given aspect of a given category. Each dependency specifies the values of another aspect of the same category (the &lt;i&gt;control&lt;/i&gt; aspect), for which the given value of the given aspect can also be selected by the seller. This container consists of constraint information for the corresponding product aspect value.
 * @package  Nopolabs\EBay\Commerce\Taxonomy
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ValueConstraint implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ValueConstraint';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'applicable_for_localized_aspect_name' => 'string',
        'applicable_for_localized_aspect_values' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'applicable_for_localized_aspect_name' => null,
        'applicable_for_localized_aspect_values' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'applicable_for_localized_aspect_name' => 'applicableForLocalizedAspectName',
        'applicable_for_localized_aspect_values' => 'applicableForLocalizedAspectValues'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'applicable_for_localized_aspect_name' => 'setApplicableForLocalizedAspectName',
        'applicable_for_localized_aspect_values' => 'setApplicableForLocalizedAspectValues'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'applicable_for_localized_aspect_name' => 'getApplicableForLocalizedAspectName',
        'applicable_for_localized_aspect_values' => 'getApplicableForLocalizedAspectValues'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['applicable_for_localized_aspect_name'] = isset($data['applicable_for_localized_aspect_name']) ? $data['applicable_for_localized_aspect_name'] : null;
        $this->container['applicable_for_localized_aspect_values'] = isset($data['applicable_for_localized_aspect_values']) ? $data['applicable_for_localized_aspect_values'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets applicable_for_localized_aspect_name
     *
     * @return string
     */
    public function getApplicableForLocalizedAspectName()
    {
        return $this->container['applicable_for_localized_aspect_name'];
    }

    /**
     * Sets applicable_for_localized_aspect_name
     *
     * @param string $applicable_for_localized_aspect_name The name of the control aspect on which the current aspect value depends.
     *
     * @return $this
     */
    public function setApplicableForLocalizedAspectName($applicable_for_localized_aspect_name)
    {
        $this->container['applicable_for_localized_aspect_name'] = $applicable_for_localized_aspect_name;

        return $this;
    }

    /**
     * Gets applicable_for_localized_aspect_values
     *
     * @return string[]
     */
    public function getApplicableForLocalizedAspectValues()
    {
        return $this->container['applicable_for_localized_aspect_values'];
    }

    /**
     * Sets applicable_for_localized_aspect_values
     *
     * @param string[] $applicable_for_localized_aspect_values Contains a list of the values of the control aspect on which this aspect's value depends. When the control aspect has any of the specified values, the current value of the current aspect will also be available.
     *
     * @return $this
     */
    public function setApplicableForLocalizedAspectValues($applicable_for_localized_aspect_values)
    {
        $this->container['applicable_for_localized_aspect_values'] = $applicable_for_localized_aspect_values;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


