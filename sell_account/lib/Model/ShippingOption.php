<?php
/**
 * ShippingOption
 *
 * PHP version 5
 *
 * @category Class
 * @package  Nopolabs\EBay\Sell\Account
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * Account API
 *
 * The Account API gives sellers the ability to configure their eBay seller accounts, including the seller's policies (the Fulfillment Policy, Payment Policy, and Return Policy), opt in and out of eBay seller programs, configure sales tax tables, and get account information. For details on the restrictions and availability of the methods in this API, see API restrictions.
 *
 * OpenAPI spec version: v1.3.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Nopolabs\EBay\Sell\Account\Model;

use \ArrayAccess;
use \Nopolabs\EBay\Sell\Account\ObjectSerializer;

/**
 * ShippingOption Class Doc Comment
 *
 * @category Class
 * @description This complex type defines a seller&#39;s shipping configuration for either a &lt;code&gt;DOMESTIC&lt;/code&gt; or &lt;code&gt;INTERNATIONAL&lt;/code&gt; shipping option. &lt;br&gt;&lt;br&gt;Shipping options configure the high-level settings for shipments, such as flat-rate or calculated shipping, and any rate tables the seller wants to associate with the policy. &lt;br&gt;&lt;br&gt;Each &lt;b&gt;shippingOption&lt;/b&gt; element has a &lt;b&gt;shippingServices&lt;/b&gt; container that defines the list of shipping carriers and services that are available for the parent shipping option (that is, for either DOMESTIC or INTERNATIONAL shipping). If a seller offers an international shipping option, they must also offer a domestic shipping option. &lt;br&gt;&lt;br&gt;Note that &lt;b&gt;costType&lt;/b&gt; (&lt;code&gt;FLAT_RATE&lt;/code&gt; or &lt;code&gt;CALCULATED&lt;/code&gt;) is set in &lt;b&gt;shippingOptions&lt;/b&gt; and that all associated shipping services must be able to support this cost type.
 * @package  Nopolabs\EBay\Sell\Account
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ShippingOption implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ShippingOption';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'cost_type' => 'string',
        'insurance_fee' => '\Nopolabs\EBay\Sell\Account\Model\Amount',
        'insurance_offered' => 'bool',
        'option_type' => 'string',
        'package_handling_cost' => '\Nopolabs\EBay\Sell\Account\Model\Amount',
        'rate_table_id' => 'string',
        'shipping_services' => '\Nopolabs\EBay\Sell\Account\Model\ShippingService[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'cost_type' => null,
        'insurance_fee' => null,
        'insurance_offered' => null,
        'option_type' => null,
        'package_handling_cost' => null,
        'rate_table_id' => null,
        'shipping_services' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'cost_type' => 'costType',
        'insurance_fee' => 'insuranceFee',
        'insurance_offered' => 'insuranceOffered',
        'option_type' => 'optionType',
        'package_handling_cost' => 'packageHandlingCost',
        'rate_table_id' => 'rateTableId',
        'shipping_services' => 'shippingServices'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'cost_type' => 'setCostType',
        'insurance_fee' => 'setInsuranceFee',
        'insurance_offered' => 'setInsuranceOffered',
        'option_type' => 'setOptionType',
        'package_handling_cost' => 'setPackageHandlingCost',
        'rate_table_id' => 'setRateTableId',
        'shipping_services' => 'setShippingServices'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'cost_type' => 'getCostType',
        'insurance_fee' => 'getInsuranceFee',
        'insurance_offered' => 'getInsuranceOffered',
        'option_type' => 'getOptionType',
        'package_handling_cost' => 'getPackageHandlingCost',
        'rate_table_id' => 'getRateTableId',
        'shipping_services' => 'getShippingServices'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['cost_type'] = isset($data['cost_type']) ? $data['cost_type'] : null;
        $this->container['insurance_fee'] = isset($data['insurance_fee']) ? $data['insurance_fee'] : null;
        $this->container['insurance_offered'] = isset($data['insurance_offered']) ? $data['insurance_offered'] : null;
        $this->container['option_type'] = isset($data['option_type']) ? $data['option_type'] : null;
        $this->container['package_handling_cost'] = isset($data['package_handling_cost']) ? $data['package_handling_cost'] : null;
        $this->container['rate_table_id'] = isset($data['rate_table_id']) ? $data['rate_table_id'] : null;
        $this->container['shipping_services'] = isset($data['shipping_services']) ? $data['shipping_services'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets cost_type
     *
     * @return string
     */
    public function getCostType()
    {
        return $this->container['cost_type'];
    }

    /**
     * Sets cost_type
     *
     * @param string $cost_type Required if the policy offers shipping options using a shippingOptions container. Defines whether the shipping cost is FLAT_RATE, CALCULATED, or NOT_SPECIFIED (for use with freight shipping and local pickup). For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/account/types/ShippingCostTypeEnum.html'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setCostType($cost_type)
    {
        $this->container['cost_type'] = $cost_type;

        return $this;
    }

    /**
     * Gets insurance_fee
     *
     * @return \Nopolabs\EBay\Sell\Account\Model\Amount
     */
    public function getInsuranceFee()
    {
        return $this->container['insurance_fee'];
    }

    /**
     * Sets insurance_fee
     *
     * @param \Nopolabs\EBay\Sell\Account\Model\Amount $insurance_fee insurance_fee
     *
     * @return $this
     */
    public function setInsuranceFee($insurance_fee)
    {
        $this->container['insurance_fee'] = $insurance_fee;

        return $this;
    }

    /**
     * Gets insurance_offered
     *
     * @return bool
     */
    public function getInsuranceOffered()
    {
        return $this->container['insurance_offered'];
    }

    /**
     * Sets insurance_offered
     *
     * @param bool $insurance_offered If set to true, the seller offers buyer-paid shipping insurance. The optionType shows whether this is for either a domestic or international shipment. Buyer-paid shipping insurance is currently supported in only Australia (AU), France (FR), and Italy (IT).
     *
     * @return $this
     */
    public function setInsuranceOffered($insurance_offered)
    {
        $this->container['insurance_offered'] = $insurance_offered;

        return $this;
    }

    /**
     * Gets option_type
     *
     * @return string
     */
    public function getOptionType()
    {
        return $this->container['option_type'];
    }

    /**
     * Sets option_type
     *
     * @param string $option_type Required if the policy offers shipping options using a shippingOptions container. Use this field to set the ShippingOption element to either DOMESTIC or INTERNATIONAL. For implementation help, refer to <a href='https://developer.ebay.com/devzone/rest/api-ref/account/types/ShippingOptionTypeEnum.html'>eBay API documentation</a>
     *
     * @return $this
     */
    public function setOptionType($option_type)
    {
        $this->container['option_type'] = $option_type;

        return $this;
    }

    /**
     * Gets package_handling_cost
     *
     * @return \Nopolabs\EBay\Sell\Account\Model\Amount
     */
    public function getPackageHandlingCost()
    {
        return $this->container['package_handling_cost'];
    }

    /**
     * Sets package_handling_cost
     *
     * @param \Nopolabs\EBay\Sell\Account\Model\Amount $package_handling_cost package_handling_cost
     *
     * @return $this
     */
    public function setPackageHandlingCost($package_handling_cost)
    {
        $this->container['package_handling_cost'] = $package_handling_cost;

        return $this;
    }

    /**
     * Gets rate_table_id
     *
     * @return string
     */
    public function getRateTableId()
    {
        return $this->container['rate_table_id'];
    }

    /**
     * Sets rate_table_id
     *
     * @param string $rate_table_id A unique eBay-assigned ID associated with a user-created shipping rate table. The locality of a shipping rate table can be either DOMESTIC or INTERNATIONAL and you must ensure the value specified in this field references a shipping rate table that matches the type specified in the shippingOptions.optionType field. If you mismatch the types, eBay responds with a 20403 error. Call getRateTable to retrieve information (including rateTableId values) on the rate tables configured by a seller. For information on creating rate tables, see Using shipping rate tables.
     *
     * @return $this
     */
    public function setRateTableId($rate_table_id)
    {
        $this->container['rate_table_id'] = $rate_table_id;

        return $this;
    }

    /**
     * Gets shipping_services
     *
     * @return \Nopolabs\EBay\Sell\Account\Model\ShippingService[]
     */
    public function getShippingServices()
    {
        return $this->container['shipping_services'];
    }

    /**
     * Sets shipping_services
     *
     * @param \Nopolabs\EBay\Sell\Account\Model\ShippingService[] $shipping_services Required if the policy offers shipping options using a shippingOptions container. Contains a list of shipping services offered for either DOMESTIC or INTERNATIONAL shipments. Sellers can specify up to four domestic shipping services and up to five international shipping services by using separate shippingService containers for each. Note that if the seller is opted in to the Global Shipping Program, they can specify only four other international shipping services, regardless of whether or not Global Shipping is offered as one of the services.
     *
     * @return $this
     */
    public function setShippingServices($shipping_services)
    {
        $this->container['shipping_services'] = $shipping_services;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


